"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  Document: () => import_ai.Document,
  DocumentDataSchema: () => import_ai.DocumentDataSchema,
  FlowActionInputSchema: () => import_core.FlowActionInputSchema,
  FlowErrorSchema: () => import_core.FlowErrorSchema,
  FlowInvokeEnvelopeMessageSchema: () => import_core.FlowInvokeEnvelopeMessageSchema,
  FlowServer: () => import_core.FlowServer,
  GENKIT_CLIENT_HEADER: () => import_core.GENKIT_CLIENT_HEADER,
  GENKIT_VERSION: () => import_core.GENKIT_VERSION,
  GenerationBlockedError: () => import_ai.GenerationBlockedError,
  GenerationCommonConfigSchema: () => import_ai.GenerationCommonConfigSchema,
  GenerationResponseError: () => import_ai.GenerationResponseError,
  GenkitError: () => import_core.GenkitError,
  LlmResponseSchema: () => import_ai.LlmResponseSchema,
  LlmStatsSchema: () => import_ai.LlmStatsSchema,
  Message: () => import_ai.Message,
  MessageSchema: () => import_ai.MessageSchema,
  ModelIdSchema: () => import_ai.ModelIdSchema,
  ModelRequestSchema: () => import_ai.ModelRequestSchema,
  ModelResponseSchema: () => import_ai.ModelResponseSchema,
  PartSchema: () => import_ai.PartSchema,
  ReflectionServer: () => import_core.ReflectionServer,
  RoleSchema: () => import_ai.RoleSchema,
  RunActionResponseSchema: () => import_core.RunActionResponseSchema,
  StatusCodes: () => import_core.StatusCodes,
  StatusSchema: () => import_core.StatusSchema,
  ToolCallSchema: () => import_ai.ToolCallSchema,
  ToolSchema: () => import_ai.ToolSchema,
  asTool: () => import_ai.asTool,
  defineFlow: () => import_core.defineFlow,
  defineJsonSchema: () => import_core.defineJsonSchema,
  defineSchema: () => import_core.defineSchema,
  defineStreamingFlow: () => import_core.defineStreamingFlow,
  deleteUndefinedProps: () => import_core.deleteUndefinedProps,
  embedderRef: () => import_ai.embedderRef,
  evaluatorRef: () => import_ai.evaluatorRef,
  flowMetadataPrefix: () => import_core.flowMetadataPrefix,
  getCurrentEnv: () => import_core.getCurrentEnv,
  getFlowAuth: () => import_core.getFlowAuth,
  getStreamingCallback: () => import_core.getStreamingCallback,
  indexerRef: () => import_ai.indexerRef,
  isDevEnv: () => import_core.isDevEnv,
  loadPromptFile: () => import_dotprompt.loadPromptFile,
  rerankerRef: () => import_ai.rerankerRef,
  retrieverRef: () => import_ai.retrieverRef,
  run: () => import_core.run,
  runWithStreamingCallback: () => import_core.runWithStreamingCallback,
  toGenerateRequest: () => import_ai.toGenerateRequest,
  toToolWireFormat: () => import_ai.toToolWireFormat,
  z: () => import_core.z
});
module.exports = __toCommonJS(src_exports);
var import_ai = require("@genkit-ai/ai");
var import_core = require("@genkit-ai/core");
var import_dotprompt = require("@genkit-ai/dotprompt");
__reExport(src_exports, require("./genkit.js"), module.exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Document,
  DocumentDataSchema,
  FlowActionInputSchema,
  FlowErrorSchema,
  FlowInvokeEnvelopeMessageSchema,
  FlowServer,
  GENKIT_CLIENT_HEADER,
  GENKIT_VERSION,
  GenerationBlockedError,
  GenerationCommonConfigSchema,
  GenerationResponseError,
  GenkitError,
  LlmResponseSchema,
  LlmStatsSchema,
  Message,
  MessageSchema,
  ModelIdSchema,
  ModelRequestSchema,
  ModelResponseSchema,
  PartSchema,
  ReflectionServer,
  RoleSchema,
  RunActionResponseSchema,
  StatusCodes,
  StatusSchema,
  ToolCallSchema,
  ToolSchema,
  asTool,
  defineFlow,
  defineJsonSchema,
  defineSchema,
  defineStreamingFlow,
  deleteUndefinedProps,
  embedderRef,
  evaluatorRef,
  flowMetadataPrefix,
  getCurrentEnv,
  getFlowAuth,
  getStreamingCallback,
  indexerRef,
  isDevEnv,
  loadPromptFile,
  rerankerRef,
  retrieverRef,
  run,
  runWithStreamingCallback,
  toGenerateRequest,
  toToolWireFormat,
  z,
  ...require("./genkit.js")
});
//# sourceMappingURL=index.js.map