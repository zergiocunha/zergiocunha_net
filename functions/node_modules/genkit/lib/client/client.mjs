import {
  __async,
  __asyncGenerator,
  __await,
  __spreadValues
} from "../chunk-7LUMLJGI.mjs";
const __flowStreamDelimiter = "\n\n";
function streamFlow({
  url,
  input,
  headers
}) {
  let chunkStreamController = void 0;
  const chunkStream = new ReadableStream({
    start(controller) {
      chunkStreamController = controller;
    },
    pull() {
    },
    cancel() {
    }
  });
  const operationPromise = __flowRunEnvelope({
    url,
    input,
    streamingCallback: (c) => {
      chunkStreamController == null ? void 0 : chunkStreamController.enqueue(c);
    },
    headers
  });
  operationPromise.then((o) => {
    chunkStreamController == null ? void 0 : chunkStreamController.close();
    return o;
  });
  return {
    output() {
      return operationPromise;
    },
    stream() {
      return __asyncGenerator(this, null, function* () {
        const reader = chunkStream.getReader();
        while (true) {
          const chunk = yield new __await(reader.read());
          if ((chunk == null ? void 0 : chunk.value) !== void 0) {
            yield chunk.value;
          }
          if (chunk.done) {
            break;
          }
        }
        return yield new __await(operationPromise);
      });
    }
  };
}
function __flowRunEnvelope(_0) {
  return __async(this, arguments, function* ({
    url,
    input,
    streamingCallback,
    headers
  }) {
    let response;
    response = yield fetch(url, {
      method: "POST",
      body: JSON.stringify({
        data: input
      }),
      headers: __spreadValues({
        Accept: "text/event-stream",
        "Content-Type": "application/json"
      }, headers)
    });
    if (!response.body) {
      throw new Error("Response body is empty");
    }
    var reader = response.body.getReader();
    var decoder = new TextDecoder();
    let buffer = "";
    while (true) {
      const result = yield reader.read();
      const decodedValue = decoder.decode(result.value);
      if (decodedValue) {
        buffer += decodedValue;
      }
      while (buffer.includes(__flowStreamDelimiter)) {
        const chunk = JSON.parse(
          buffer.substring(0, buffer.indexOf(__flowStreamDelimiter)).substring("data: ".length)
        );
        if (chunk.hasOwnProperty("message")) {
          streamingCallback(chunk.message);
        } else if (chunk.hasOwnProperty("result")) {
          return chunk.result;
        } else if (chunk.hasOwnProperty("error")) {
          throw new Error(
            `${chunk.error.status}: ${chunk.error.message}
${chunk.error.details}`
          );
        } else {
          throw new Error("unkown chunk format: " + JSON.stringify(chunk));
        }
        buffer = buffer.substring(
          buffer.indexOf(__flowStreamDelimiter) + __flowStreamDelimiter.length
        );
      }
    }
    throw new Error("stream did not terminate correctly");
  });
}
function runFlow(_0) {
  return __async(this, arguments, function* ({
    url,
    input,
    headers
  }) {
    const response = yield fetch(url, {
      method: "POST",
      body: JSON.stringify({
        data: input
      }),
      headers: __spreadValues({
        "Content-Type": "application/json"
      }, headers)
    });
    const wrappedDesult = yield response.json();
    return wrappedDesult.result;
  });
}
export {
  runFlow,
  streamFlow
};
//# sourceMappingURL=client.mjs.map