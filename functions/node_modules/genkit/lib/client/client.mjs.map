{"version":3,"sources":["../../src/client/client.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst __flowStreamDelimiter = '\\n\\n';\n\n/**\n * Invoke and stream response from a deployed flow.\n *\n * For example:\n *\n * ```js\n * import { streamFlow } from '@genkit-ai/core/flow-client';\n *\n * const response = streamFlow({\n *   url: 'https://my-flow-deployed-url',\n *   input: 'foo',\n * });\n * for await (const chunk of response.stream) {\n *   console.log(chunk);\n * }\n * console.log(await response.output);\n * ```\n */\nexport function streamFlow({\n  url,\n  input,\n  headers,\n}: {\n  url: string;\n  input?: any;\n  headers?: Record<string, string>;\n}) {\n  let chunkStreamController: ReadableStreamDefaultController | undefined =\n    undefined;\n  const chunkStream = new ReadableStream({\n    start(controller) {\n      chunkStreamController = controller;\n    },\n    pull() {},\n    cancel() {},\n  });\n\n  const operationPromise = __flowRunEnvelope({\n    url,\n    input,\n    streamingCallback: (c) => {\n      chunkStreamController?.enqueue(c);\n    },\n    headers,\n  });\n  operationPromise.then((o) => {\n    chunkStreamController?.close();\n    return o;\n  });\n\n  return {\n    output() {\n      return operationPromise;\n    },\n    async *stream() {\n      const reader = chunkStream.getReader();\n      while (true) {\n        const chunk = await reader.read();\n        if (chunk?.value !== undefined) {\n          yield chunk.value;\n        }\n        if (chunk.done) {\n          break;\n        }\n      }\n      return await operationPromise;\n    },\n  };\n}\n\nasync function __flowRunEnvelope({\n  url,\n  input,\n  streamingCallback,\n  headers,\n}: {\n  url: string;\n  input: any;\n  streamingCallback: (chunk: any) => void;\n  headers?: Record<string, string>;\n}) {\n  let response;\n  response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      data: input,\n    }),\n    headers: {\n      Accept: 'text/event-stream',\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n  });\n  if (!response.body) {\n    throw new Error('Response body is empty');\n  }\n  var reader = response.body.getReader();\n  var decoder = new TextDecoder();\n\n  let buffer = '';\n  while (true) {\n    const result = await reader.read();\n    const decodedValue = decoder.decode(result.value);\n    if (decodedValue) {\n      buffer += decodedValue;\n    }\n    // If buffer includes the delimiter that means we are still recieving chunks.\n    while (buffer.includes(__flowStreamDelimiter)) {\n      const chunk = JSON.parse(\n        buffer\n          .substring(0, buffer.indexOf(__flowStreamDelimiter))\n          .substring('data: '.length)\n      );\n      if (chunk.hasOwnProperty('message')) {\n        streamingCallback(chunk.message);\n      } else if (chunk.hasOwnProperty('result')) {\n        return chunk.result;\n      } else if (chunk.hasOwnProperty('error')) {\n        throw new Error(\n          `${chunk.error.status}: ${chunk.error.message}\\n${chunk.error.details}`\n        );\n      } else {\n        throw new Error('unkown chunk format: ' + JSON.stringify(chunk));\n      }\n      buffer = buffer.substring(\n        buffer.indexOf(__flowStreamDelimiter) + __flowStreamDelimiter.length\n      );\n    }\n  }\n  throw new Error('stream did not terminate correctly');\n}\n\n/**\n * Invoke a deployed flow over HTTP(s).\n *\n * For example:\n *\n * ```js\n * import { runFlow } from '@genkit-ai/core/flow-client';\n *\n * const response = await runFlow({\n *   url: 'https://my-flow-deployed-url',\n *   input: 'foo',\n * });\n * console.log(await response);\n * ```\n */\nexport async function runFlow({\n  url,\n  input,\n  headers,\n}: {\n  url: string;\n  input?: any;\n  headers?: Record<string, string>;\n}) {\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      data: input,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n  });\n  const wrappedDesult = await response.json();\n  return wrappedDesult.result;\n}\n"],"mappings":"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","names":[]}