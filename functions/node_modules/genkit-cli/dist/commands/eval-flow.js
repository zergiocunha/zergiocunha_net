"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.evalFlow = void 0;
const tools_common_1 = require("@genkit-ai/tools-common");
const eval_1 = require("@genkit-ai/tools-common/eval");
const utils_1 = require("@genkit-ai/tools-common/utils");
const commander_1 = require("commander");
const promises_1 = require("fs/promises");
const manager_utils_1 = require("../utils/manager-utils");
const EVAL_FLOW_SCHEMA = '{samples: Array<{input: any; reference?: any;}>}';
var SourceType;
(function (SourceType) {
    SourceType["DATA"] = "data";
    SourceType["FILE"] = "file";
    SourceType["DATASET"] = "dataset";
})(SourceType || (SourceType = {}));
exports.evalFlow = new commander_1.Command('eval:flow')
    .description('evaluate a flow against configured evaluators using provided data as input')
    .argument('<flowName>', 'Name of the flow to run')
    .argument('[data]', 'JSON data to use to start the flow')
    .option('--input <input>', 'Input dataset ID or JSON file to be used for evaluation')
    .option('-a, --auth <JSON>', 'JSON object passed to authPolicy and stored in local state as auth', '')
    .option('-o, --output <filename>', 'Name of the output file to write evaluation results. Defaults to json output.')
    .option('--output-format <format>', 'The output file format (csv, json)', 'json')
    .option('-e, --evaluators <evaluators>', 'comma separated list of evaluators to use (by default uses all)')
    .option('-f, --force', 'Automatically accept all interactive prompts')
    .action(async (flowName, data, options) => {
    await (0, manager_utils_1.runWithManager)(async (manager) => {
        if (!data && !options.input) {
            throw new Error('No input data passed. Specify input data using [data] argument or --input <filename> option');
        }
        let evaluatorActions;
        if (!options.evaluators) {
            evaluatorActions = await (0, eval_1.getAllEvaluatorActions)(manager);
        }
        else {
            const evalActionKeys = options.evaluators
                .split(',')
                .map((k) => `/evaluator/${k}`);
            evaluatorActions = await (0, eval_1.getMatchingEvaluatorActions)(manager, evalActionKeys);
        }
        utils_1.logger.debug(`Using evaluators: ${evaluatorActions.map((action) => action.name).join(',')}`);
        if (!options.force) {
            const confirmed = await (0, utils_1.confirmLlmUse)(evaluatorActions);
            if (!confirmed) {
                throw new Error('User declined using billed evaluators.');
            }
        }
        const sourceType = getSourceType(data, options.input);
        let targetDatasetMetadata;
        if (sourceType === SourceType.DATASET) {
            const datasetStore = await (0, eval_1.getDatasetStore)();
            const datasetMetadatas = await datasetStore.listDatasets();
            targetDatasetMetadata = datasetMetadatas.find((d) => d.datasetId === options.input);
        }
        const actionRef = `/flow/${flowName}`;
        const evalFlowInput = await readInputs(sourceType, data, options.input);
        const evalDataset = await (0, eval_1.runInference)({
            manager,
            actionRef,
            evalFlowInput,
            auth: options.auth,
        });
        const evalRun = await (0, eval_1.runEvaluation)({
            manager,
            evaluatorActions,
            evalDataset,
            augments: {
                actionRef: `/flow/${flowName}`,
                datasetId: sourceType === SourceType.DATASET ? options.input : undefined,
                datasetVersion: targetDatasetMetadata?.version,
            },
        });
        if (options.output) {
            const exportFn = (0, eval_1.getExporterForString)(options.outputFormat);
            await exportFn(evalRun, options.output);
        }
        console.log(`Succesfully ran evaluation, with evalId: ${evalRun.key.evalRunId}`);
    });
});
async function readInputs(sourceType, dataField, input) {
    let parsedData;
    switch (sourceType) {
        case SourceType.DATA:
            parsedData = JSON.parse(dataField);
            break;
        case SourceType.FILE:
            parsedData = JSON.parse(await (0, promises_1.readFile)(input, 'utf8'));
            break;
        case SourceType.DATASET:
            const datasetStore = await (0, eval_1.getDatasetStore)();
            const data = await datasetStore.getDataset(input);
            parsedData = { samples: data };
            break;
    }
    try {
        return tools_common_1.EvalInferenceInputSchema.parse(parsedData);
    }
    catch (e) {
        throw new Error(`Error parsing the input. Please provide an array of inputs for the flow or a ${EVAL_FLOW_SCHEMA} object. Error: ${e}`);
    }
}
function getSourceType(data, input) {
    if (input) {
        if (data) {
            utils_1.logger.warn('Both [data] and input provided, ignoring [data]...');
        }
        return input.endsWith('.json') ? SourceType.FILE : SourceType.DATASET;
    }
    else if (data) {
        return SourceType.DATA;
    }
    throw new Error('Must provide either data or input');
}
//# sourceMappingURL=eval-flow.js.map