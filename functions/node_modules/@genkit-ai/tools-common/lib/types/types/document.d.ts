import z from 'zod';
export declare const TextPartSchema: z.ZodObject<z.objectUtil.extendShape<{
    text: z.ZodOptional<z.ZodNever>;
    media: z.ZodOptional<z.ZodNever>;
}, {
    text: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    text: string;
    media?: undefined;
}, {
    text: string;
    media?: undefined;
}>;
export type TextPart = z.infer<typeof TextPartSchema>;
export declare const MediaPartSchema: z.ZodObject<z.objectUtil.extendShape<{
    text: z.ZodOptional<z.ZodNever>;
    media: z.ZodOptional<z.ZodNever>;
}, {
    media: z.ZodObject<{
        contentType: z.ZodOptional<z.ZodString>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        contentType?: string | undefined;
    }, {
        url: string;
        contentType?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    media: {
        url: string;
        contentType?: string | undefined;
    };
    text?: undefined;
}, {
    media: {
        url: string;
        contentType?: string | undefined;
    };
    text?: undefined;
}>;
export type MediaPart = z.infer<typeof MediaPartSchema>;
export declare const PartSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
    text: z.ZodOptional<z.ZodNever>;
    media: z.ZodOptional<z.ZodNever>;
}, {
    text: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    text: string;
    media?: undefined;
}, {
    text: string;
    media?: undefined;
}>, z.ZodObject<z.objectUtil.extendShape<{
    text: z.ZodOptional<z.ZodNever>;
    media: z.ZodOptional<z.ZodNever>;
}, {
    media: z.ZodObject<{
        contentType: z.ZodOptional<z.ZodString>;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        contentType?: string | undefined;
    }, {
        url: string;
        contentType?: string | undefined;
    }>;
}>, "strip", z.ZodTypeAny, {
    media: {
        url: string;
        contentType?: string | undefined;
    };
    text?: undefined;
}, {
    media: {
        url: string;
        contentType?: string | undefined;
    };
    text?: undefined;
}>]>;
export type Part = z.infer<typeof PartSchema>;
export declare const DocumentDataSchema: z.ZodObject<{
    content: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
        text: z.ZodOptional<z.ZodNever>;
        media: z.ZodOptional<z.ZodNever>;
    }, {
        text: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        text: string;
        media?: undefined;
    }, {
        text: string;
        media?: undefined;
    }>, z.ZodObject<z.objectUtil.extendShape<{
        text: z.ZodOptional<z.ZodNever>;
        media: z.ZodOptional<z.ZodNever>;
    }, {
        media: z.ZodObject<{
            contentType: z.ZodOptional<z.ZodString>;
            url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            contentType?: string | undefined;
        }, {
            url: string;
            contentType?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        media: {
            url: string;
            contentType?: string | undefined;
        };
        text?: undefined;
    }, {
        media: {
            url: string;
            contentType?: string | undefined;
        };
        text?: undefined;
    }>]>, "many">;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    content: ({
        text: string;
        media?: undefined;
    } | {
        media: {
            url: string;
            contentType?: string | undefined;
        };
        text?: undefined;
    })[];
    metadata?: Record<string, any> | undefined;
}, {
    content: ({
        text: string;
        media?: undefined;
    } | {
        media: {
            url: string;
            contentType?: string | undefined;
        };
        text?: undefined;
    })[];
    metadata?: Record<string, any> | undefined;
}>;
export type DocumentData = z.infer<typeof DocumentDataSchema>;
