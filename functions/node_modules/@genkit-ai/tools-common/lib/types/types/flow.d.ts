import * as z from 'zod';
export declare const FlowInvokeEnvelopeMessageSchema: z.ZodObject<{
    start: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }>>;
    schedule: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        delay: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        delay?: number | undefined;
    }, {
        input?: unknown;
        delay?: number | undefined;
    }>>;
    runScheduled: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    resume: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
        payload: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
        payload?: unknown;
    }, {
        flowId: string;
        payload?: unknown;
    }>>;
    state: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    state?: {
        flowId: string;
    } | undefined;
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
}, {
    state?: {
        flowId: string;
    } | undefined;
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
}>;
export type FlowInvokeEnvelopeMessage = z.infer<typeof FlowInvokeEnvelopeMessageSchema>;
export declare const FlowActionInputSchema: z.ZodObject<z.objectUtil.extendShape<{
    start: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }>>;
    schedule: z.ZodOptional<z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        delay: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        delay?: number | undefined;
    }, {
        input?: unknown;
        delay?: number | undefined;
    }>>;
    runScheduled: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    retry: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
    resume: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
        payload: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
        payload?: unknown;
    }, {
        flowId: string;
        payload?: unknown;
    }>>;
    state: z.ZodOptional<z.ZodObject<{
        flowId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        flowId: string;
    }, {
        flowId: string;
    }>>;
}, {
    auth: z.ZodOptional<z.ZodUnknown>;
}>, "strip", z.ZodTypeAny, {
    state?: {
        flowId: string;
    } | undefined;
    auth?: unknown;
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
}, {
    state?: {
        flowId: string;
    } | undefined;
    auth?: unknown;
    start?: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    } | undefined;
    schedule?: {
        input?: unknown;
        delay?: number | undefined;
    } | undefined;
    runScheduled?: {
        flowId: string;
    } | undefined;
    retry?: {
        flowId: string;
    } | undefined;
    resume?: {
        flowId: string;
        payload?: unknown;
    } | undefined;
}>;
export declare const FlowStateExecutionSchema: z.ZodObject<{
    startTime: z.ZodOptional<z.ZodNumber>;
    endTime: z.ZodOptional<z.ZodNumber>;
    traceIds: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    traceIds: string[];
    startTime?: number | undefined;
    endTime?: number | undefined;
}, {
    traceIds: string[];
    startTime?: number | undefined;
    endTime?: number | undefined;
}>;
export type FlowStateExecution = z.infer<typeof FlowStateExecutionSchema>;
export declare const FlowResponseSchema: z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>;
export declare const FlowErrorSchema: z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>;
export type FlowError = z.infer<typeof FlowErrorSchema>;
export declare const FlowResultSchema: z.ZodIntersection<z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>, z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>>;
