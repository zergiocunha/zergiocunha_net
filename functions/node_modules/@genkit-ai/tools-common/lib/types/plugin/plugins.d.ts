import { z } from 'zod';
declare const SupportedFlagValuesSchema: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
export declare const BaseToolPluginActionSchema: z.ZodObject<{
    args: z.ZodOptional<z.ZodArray<z.ZodObject<{
        description: z.ZodString;
        flag: z.ZodString;
        defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }, {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }>, "many">>;
    hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
}, "strip", z.ZodTypeAny, {
    hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
    args?: {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }[] | undefined;
}, {
    hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
    args?: {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }[] | undefined;
}>;
export declare const ToolPluginActionSchema: z.ZodObject<z.objectUtil.extendShape<{
    args: z.ZodOptional<z.ZodArray<z.ZodObject<{
        description: z.ZodString;
        flag: z.ZodString;
        defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }, {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }>, "many">>;
    hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
}, {
    action: z.ZodString;
    helpText: z.ZodString;
}>, "strip", z.ZodTypeAny, {
    hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
    action: string;
    helpText: string;
    args?: {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }[] | undefined;
}, {
    hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
    action: string;
    helpText: string;
    args?: {
        description: string;
        flag: string;
        defaultValue?: string | boolean | string[] | undefined;
    }[] | undefined;
}>;
export declare const ToolPluginSubCommandsSchema: z.ZodObject<{
    login: z.ZodOptional<z.ZodObject<{
        args: z.ZodOptional<z.ZodArray<z.ZodObject<{
            description: z.ZodString;
            flag: z.ZodString;
            defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }>, "many">>;
        hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
    }, "strip", z.ZodTypeAny, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }>>;
    deploy: z.ZodOptional<z.ZodObject<{
        args: z.ZodOptional<z.ZodArray<z.ZodObject<{
            description: z.ZodString;
            flag: z.ZodString;
            defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }>, "many">>;
        hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
    }, "strip", z.ZodTypeAny, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    login?: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    } | undefined;
    deploy?: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    } | undefined;
}, {
    login?: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    } | undefined;
    deploy?: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    } | undefined;
}>;
export declare const ToolPluginSchema: z.ZodObject<{
    name: z.ZodString;
    keyword: z.ZodString;
    actions: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        args: z.ZodOptional<z.ZodArray<z.ZodObject<{
            description: z.ZodString;
            flag: z.ZodString;
            defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
        }, "strip", z.ZodTypeAny, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }, {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }>, "many">>;
        hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
    }, {
        action: z.ZodString;
        helpText: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        action: string;
        helpText: string;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }, {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        action: string;
        helpText: string;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }>, "many">;
    subCommands: z.ZodOptional<z.ZodObject<{
        login: z.ZodOptional<z.ZodObject<{
            args: z.ZodOptional<z.ZodArray<z.ZodObject<{
                description: z.ZodString;
                flag: z.ZodString;
                defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }, {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }>, "many">>;
            hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
        }, "strip", z.ZodTypeAny, {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        }, {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        }>>;
        deploy: z.ZodOptional<z.ZodObject<{
            args: z.ZodOptional<z.ZodArray<z.ZodObject<{
                description: z.ZodString;
                flag: z.ZodString;
                defaultValue: z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>;
            }, "strip", z.ZodTypeAny, {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }, {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }>, "many">>;
            hook: z.ZodFunction<z.ZodTuple<[z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUndefined, z.ZodString, z.ZodBoolean, z.ZodArray<z.ZodString, "many">]>>>], z.ZodUnknown>, z.ZodUnion<[z.ZodVoid, z.ZodPromise<z.ZodVoid>]>>;
        }, "strip", z.ZodTypeAny, {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        }, {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        login?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
        deploy?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
    }, {
        login?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
        deploy?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    keyword: string;
    actions: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        action: string;
        helpText: string;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }[];
    subCommands?: {
        login?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
        deploy?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
    } | undefined;
}, {
    name: string;
    keyword: string;
    actions: {
        hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
        action: string;
        helpText: string;
        args?: {
            description: string;
            flag: string;
            defaultValue?: string | boolean | string[] | undefined;
        }[] | undefined;
    }[];
    subCommands?: {
        login?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
        deploy?: {
            hook: (args_0: Record<string, string | boolean | string[] | undefined> | undefined, ...args_1: unknown[]) => void | Promise<void>;
            args?: {
                description: string;
                flag: string;
                defaultValue?: string | boolean | string[] | undefined;
            }[] | undefined;
        } | undefined;
    } | undefined;
}>;
export type SupportedFlagValues = z.infer<typeof SupportedFlagValuesSchema>;
export type BaseToolPluginAction = z.infer<typeof BaseToolPluginActionSchema>;
export type ToolPluginAction = z.infer<typeof ToolPluginActionSchema>;
export type ToolPlugin = z.infer<typeof ToolPluginSchema>;
export type SpecialAction = keyof z.infer<typeof ToolPluginSubCommandsSchema>;
export declare function cliCommand(command: string, options?: string): void;
export {};
