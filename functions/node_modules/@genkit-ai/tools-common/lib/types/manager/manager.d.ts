import { Action, RunActionResponse } from '../types/action';
import * as apis from '../types/apis';
import { TraceData } from '../types/trace';
import { RuntimeEvent, RuntimeInfo, StreamingCallback } from './types';
interface RuntimeManagerOptions {
    telemetryServerUrl?: string;
    manageHealth?: boolean;
}
export declare class RuntimeManager {
    readonly telemetryServerUrl?: string | undefined;
    private manageHealth;
    private filenameToRuntimeMap;
    private idToFileMap;
    private eventEmitter;
    private constructor();
    static create(options: RuntimeManagerOptions): Promise<RuntimeManager>;
    listRuntimes(): Record<string, RuntimeInfo>;
    getRuntimeById(id: string): RuntimeInfo | undefined;
    getMostRecentRuntime(): RuntimeInfo | undefined;
    onRuntimeEvent(listener: (eventType: RuntimeEvent, runtime: RuntimeInfo) => void): void;
    listActions(): Promise<Record<string, Action>>;
    runAction(input: apis.RunActionRequest, streamingCallback?: StreamingCallback<any>): Promise<RunActionResponse>;
    listTraces(input: apis.ListTracesRequest): Promise<apis.ListTracesResponse>;
    getTrace(input: apis.GetTraceRequest): Promise<TraceData>;
    private notifyRuntime;
    private setupRuntimesWatcher;
    private handleNewRuntime;
    private handleRemovedRuntime;
    private httpErrorHandler;
    private performHealthChecks;
    private removeRuntime;
}
export {};
