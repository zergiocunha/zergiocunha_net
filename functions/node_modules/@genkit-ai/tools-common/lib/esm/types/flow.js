import { extendZodWithOpenApi } from '@asteasolutions/zod-to-openapi';
import * as z from 'zod';
extendZodWithOpenApi(z);
export const FlowInvokeEnvelopeMessageSchema = z.object({
    start: z
        .object({
        input: z.unknown().optional(),
        labels: z.record(z.string(), z.string()).optional(),
    })
        .optional(),
    schedule: z
        .object({
        input: z.unknown().optional(),
        delay: z.number().optional(),
    })
        .optional(),
    runScheduled: z
        .object({
        flowId: z.string(),
    })
        .optional(),
    retry: z
        .object({
        flowId: z.string(),
    })
        .optional(),
    resume: z
        .object({
        flowId: z.string(),
        payload: z.unknown().optional(),
    })
        .optional(),
    state: z
        .object({
        flowId: z.string(),
    })
        .optional(),
});
export const FlowActionInputSchema = FlowInvokeEnvelopeMessageSchema.extend({
    auth: z.unknown().optional(),
});
export const FlowStateExecutionSchema = z.object({
    startTime: z
        .number()
        .optional()
        .describe('start time in milliseconds since the epoch'),
    endTime: z
        .number()
        .optional()
        .describe('end time in milliseconds since the epoch'),
    traceIds: z.array(z.string()),
});
export const FlowResponseSchema = z.object({
    response: z.unknown().nullable(),
});
export const FlowErrorSchema = z.object({
    error: z.string().optional(),
    stacktrace: z.string().optional(),
});
export const FlowResultSchema = FlowResponseSchema.and(FlowErrorSchema);
//# sourceMappingURL=flow.js.map