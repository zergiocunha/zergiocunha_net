"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const trpcExpress = __importStar(require("@trpc/server/adapters/express"));
const bodyParser = __importStar(require("body-parser"));
const clc = __importStar(require("colorette"));
const express_1 = __importDefault(require("express"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("../utils/logger");
const package_1 = require("../utils/package");
const ui_assets_1 = require("../utils/ui-assets");
const router_1 = require("./router");
const UI_ASSETS_GCS_BUCKET = `https://storage.googleapis.com/genkit-assets`;
const UI_ASSETS_ZIP_FILE_NAME = `${package_1.toolsPackage.version}.zip`;
const UI_ASSETS_ZIP_GCS_PATH = `${UI_ASSETS_GCS_BUCKET}/${UI_ASSETS_ZIP_FILE_NAME}`;
const UI_ASSETS_ROOT = path_1.default.resolve(os_1.default.homedir(), '.genkit', 'assets', package_1.toolsPackage.version);
const UI_ASSETS_SERVE_PATH = path_1.default.resolve(UI_ASSETS_ROOT, 'ui', 'browser');
const API_BASE_PATH = '/api';
function startServer(manager, port) {
    let server;
    const app = (0, express_1.default)();
    (0, ui_assets_1.downloadAndExtractUiAssets)({
        fileUrl: UI_ASSETS_ZIP_GCS_PATH,
        extractPath: UI_ASSETS_ROOT,
        zipFileName: UI_ASSETS_ZIP_FILE_NAME,
    });
    app.use(express_1.default.static(UI_ASSETS_SERVE_PATH));
    app.options('/api/streamAction', async (req, res) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        res.status(200).send('');
    });
    app.post('/api/streamAction', bodyParser.json(), async (req, res) => {
        const { key, input } = req.body;
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Content-Type',
            'Content-Type': 'text/plain',
            'Transfer-Encoding': 'chunked',
        });
        const result = await manager.runAction({ key, input }, (chunk) => {
            res.write(JSON.stringify(chunk) + '\n');
        });
        res.write(JSON.stringify(result));
        res.end();
    });
    app.get('/api/sse', async (_, res) => {
        res.writeHead(200, {
            'Access-Control-Allow-Origin': '*',
            'Cache-Control': 'no-cache',
            'Content-Type': 'text/event-stream',
            Connection: 'keep-alive',
        });
        const runtimeInfo = JSON.stringify(manager.getMostRecentRuntime() ?? {});
        res.write('event: current-runtime\n');
        res.write(`data: ${runtimeInfo}\n\n`);
        manager.onRuntimeEvent(() => {
            const runtimeInfo = JSON.stringify(manager.getMostRecentRuntime() ?? {});
            res.write('event: current-runtime\n');
            res.write(`data: ${runtimeInfo}\n\n`);
        });
        res.on('close', () => {
            res.end();
        });
    });
    app.get('/api/__health', (_, res) => {
        res.status(200).send('');
    });
    app.post('/api/__quitquitquit', (_, res) => {
        logger_1.logger.info('Shutting down tools API');
        res.status(200).send('Server is shutting down');
        server.close(() => {
            process.exit(0);
        });
    });
    app.use(API_BASE_PATH, (req, res, next) => {
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
        if (req.method === 'OPTIONS')
            res.send('');
        else
            next();
    }, trpcExpress.createExpressMiddleware({
        router: (0, router_1.TOOLS_SERVER_ROUTER)(manager),
    }));
    app.all('*', (_, res) => {
        res.status(200).sendFile('/', { root: UI_ASSETS_SERVE_PATH });
    });
    const errorHandler = (error, request, response, next) => {
        if (error instanceof Error) {
            logger_1.logger.error(error.stack);
        }
        return response.status(500).send(error);
    };
    app.use(errorHandler);
    server = app.listen(port, () => {
        const uiUrl = 'http://localhost:' + port;
        logger_1.logger.info(`${clc.green(clc.bold('Genkit Developer UI:'))} ${uiUrl}`);
    });
    return new Promise((resolve) => {
        server.once('close', resolve);
    });
}
exports.startServer = startServer;
//# sourceMappingURL=server.js.map