"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateResponseChunkSchema = exports.ModelResponseChunkSchema = exports.GenerateResponseSchema = exports.ModelResponseSchema = exports.CandidateErrorSchema = exports.CandidateSchema = exports.GenerationUsageSchema = exports.GenerateRequestSchema = exports.ModelRequestSchema = exports.GenerationCommonConfigSchema = exports.ToolDefinitionSchema = exports.ModelInfoSchema = exports.MessageSchema = exports.RoleSchema = exports.PartSchema = exports.DataPartSchema = exports.ToolResponsePartSchema = exports.ToolRequestPartSchema = exports.MediaPartSchema = exports.TextPartSchema = void 0;
const zod_1 = require("zod");
const document_1 = require("./document");
const EmptyPartSchema = zod_1.z.object({
    text: zod_1.z.never().optional(),
    media: zod_1.z.never().optional(),
    toolRequest: zod_1.z.never().optional(),
    toolResponse: zod_1.z.never().optional(),
    data: zod_1.z.unknown().optional(),
    metadata: zod_1.z.record(zod_1.z.unknown()).optional(),
});
exports.TextPartSchema = EmptyPartSchema.extend({
    text: zod_1.z.string(),
});
exports.MediaPartSchema = EmptyPartSchema.extend({
    media: zod_1.z.object({
        contentType: zod_1.z.string().optional(),
        url: zod_1.z.string(),
    }),
});
exports.ToolRequestPartSchema = EmptyPartSchema.extend({
    toolRequest: zod_1.z.object({
        ref: zod_1.z.string().optional(),
        name: zod_1.z.string(),
        input: zod_1.z.unknown().optional(),
    }),
});
exports.ToolResponsePartSchema = EmptyPartSchema.extend({
    toolResponse: zod_1.z.object({
        ref: zod_1.z.string().optional(),
        name: zod_1.z.string(),
        output: zod_1.z.unknown().optional(),
    }),
});
exports.DataPartSchema = EmptyPartSchema.extend({
    data: zod_1.z.unknown(),
});
exports.PartSchema = zod_1.z.union([
    exports.TextPartSchema,
    exports.MediaPartSchema,
    exports.ToolRequestPartSchema,
    exports.ToolResponsePartSchema,
    exports.DataPartSchema,
]);
exports.RoleSchema = zod_1.z.enum(['system', 'user', 'model', 'tool']);
exports.MessageSchema = zod_1.z.object({
    role: exports.RoleSchema,
    content: zod_1.z.array(exports.PartSchema),
    metadata: zod_1.z.record(zod_1.z.unknown()).optional(),
});
const OutputFormatSchema = zod_1.z.enum(['json', 'text', 'media']);
exports.ModelInfoSchema = zod_1.z.object({
    versions: zod_1.z.array(zod_1.z.string()).optional(),
    label: zod_1.z.string().optional(),
    supports: zod_1.z
        .object({
        multiturn: zod_1.z.boolean().optional(),
        media: zod_1.z.boolean().optional(),
        tools: zod_1.z.boolean().optional(),
        systemRole: zod_1.z.boolean().optional(),
        output: zod_1.z.array(OutputFormatSchema).optional(),
        context: zod_1.z.boolean().optional(),
    })
        .optional(),
});
exports.ToolDefinitionSchema = zod_1.z.object({
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    inputSchema: zod_1.z
        .record(zod_1.z.any())
        .describe('Valid JSON Schema representing the input of the tool.'),
    outputSchema: zod_1.z
        .record(zod_1.z.any())
        .describe('Valid JSON Schema describing the output of the tool.')
        .optional(),
    metadata: zod_1.z
        .record(zod_1.z.any())
        .describe('additional metadata for this tool definition')
        .optional(),
});
exports.GenerationCommonConfigSchema = zod_1.z.object({
    version: zod_1.z.string().optional(),
    temperature: zod_1.z.number().optional(),
    maxOutputTokens: zod_1.z.number().optional(),
    topK: zod_1.z.number().optional(),
    topP: zod_1.z.number().optional(),
    stopSequences: zod_1.z.array(zod_1.z.string()).optional(),
});
const OutputConfigSchema = zod_1.z.object({
    format: OutputFormatSchema.optional(),
    schema: zod_1.z.record(zod_1.z.any()).optional(),
});
exports.ModelRequestSchema = zod_1.z.object({
    messages: zod_1.z.array(exports.MessageSchema),
    config: zod_1.z.any().optional(),
    tools: zod_1.z.array(exports.ToolDefinitionSchema).optional(),
    output: OutputConfigSchema.optional(),
    context: zod_1.z.array(document_1.DocumentDataSchema).optional(),
});
exports.GenerateRequestSchema = exports.ModelRequestSchema.extend({
    context: zod_1.z.array(document_1.DocumentDataSchema).optional(),
    candidates: zod_1.z.number().optional(),
});
exports.GenerationUsageSchema = zod_1.z.object({
    inputTokens: zod_1.z.number().optional(),
    outputTokens: zod_1.z.number().optional(),
    totalTokens: zod_1.z.number().optional(),
    inputCharacters: zod_1.z.number().optional(),
    outputCharacters: zod_1.z.number().optional(),
    inputImages: zod_1.z.number().optional(),
    outputImages: zod_1.z.number().optional(),
    inputVideos: zod_1.z.number().optional(),
    outputVideos: zod_1.z.number().optional(),
    inputAudioFiles: zod_1.z.number().optional(),
    outputAudioFiles: zod_1.z.number().optional(),
    custom: zod_1.z.record(zod_1.z.number()).optional(),
});
exports.CandidateSchema = zod_1.z.object({
    index: zod_1.z.number(),
    message: exports.MessageSchema,
    usage: exports.GenerationUsageSchema.optional(),
    finishReason: zod_1.z.enum(['stop', 'length', 'blocked', 'other', 'unknown']),
    finishMessage: zod_1.z.string().optional(),
    custom: zod_1.z.unknown(),
});
exports.CandidateErrorSchema = zod_1.z.object({
    index: zod_1.z.number(),
    code: zod_1.z.enum(['blocked', 'other', 'unknown']),
    message: zod_1.z.string().optional(),
});
exports.ModelResponseSchema = zod_1.z.object({
    message: exports.MessageSchema.optional(),
    finishReason: zod_1.z.enum(['stop', 'length', 'blocked', 'other', 'unknown']),
    finishMessage: zod_1.z.string().optional(),
    latencyMs: zod_1.z.number().optional(),
    usage: exports.GenerationUsageSchema.optional(),
    custom: zod_1.z.unknown(),
    request: exports.GenerateRequestSchema.optional(),
});
exports.GenerateResponseSchema = exports.ModelResponseSchema.extend({
    candidates: zod_1.z.array(exports.CandidateSchema).optional(),
    finishReason: zod_1.z
        .enum(['stop', 'length', 'blocked', 'other', 'unknown'])
        .optional(),
});
exports.ModelResponseChunkSchema = zod_1.z.object({
    content: zod_1.z.array(exports.PartSchema),
    custom: zod_1.z.unknown().optional(),
    aggregated: zod_1.z.boolean().optional(),
});
exports.GenerateResponseChunkSchema = exports.ModelResponseChunkSchema.extend({
    index: zod_1.z.number(),
});
//# sourceMappingURL=model.js.map