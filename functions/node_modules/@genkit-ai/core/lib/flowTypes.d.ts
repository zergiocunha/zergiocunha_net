import { z } from 'zod';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const FlowResponseSchema: z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>;
declare const FlowErrorSchema: z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>;
type FlowError = z.infer<typeof FlowErrorSchema>;
declare const FlowResultSchema: z.ZodIntersection<z.ZodObject<{
    response: z.ZodNullable<z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    response?: unknown;
}, {
    response?: unknown;
}>, z.ZodObject<{
    error: z.ZodOptional<z.ZodString>;
    stacktrace: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}, {
    error?: string | undefined;
    stacktrace?: string | undefined;
}>>;
/**
 * Used for flow control.
 */
declare const FlowInvokeEnvelopeMessageSchema: z.ZodObject<{
    start: z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    start: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    };
}, {
    start: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    };
}>;
type FlowInvokeEnvelopeMessage = z.infer<typeof FlowInvokeEnvelopeMessageSchema>;
/**
 * Used by the flow action.
 */
declare const FlowActionInputSchema: z.ZodObject<z.objectUtil.extendShape<{
    start: z.ZodObject<{
        input: z.ZodOptional<z.ZodUnknown>;
        labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }, {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    }>;
}, {
    auth: z.ZodOptional<z.ZodUnknown>;
}>, "strip", z.ZodTypeAny, {
    start: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    };
    auth?: unknown;
}, {
    start: {
        input?: unknown;
        labels?: Record<string, string> | undefined;
    };
    auth?: unknown;
}>;
type FlowActionInput = z.infer<typeof FlowActionInputSchema>;

export { type FlowActionInput, FlowActionInputSchema, type FlowError, FlowErrorSchema, type FlowInvokeEnvelopeMessage, FlowInvokeEnvelopeMessageSchema, FlowResponseSchema, FlowResultSchema };
