import {
  __async,
  __spreadValues
} from "./chunk-VQ2XICTI.mjs";
import { logger } from "./logging.js";
function parsePluginName(registryKey) {
  const tokens = registryKey.split("/");
  if (tokens.length === 4) {
    return tokens[2];
  }
  return void 0;
}
class Registry {
  constructor(parent) {
    this.parent = parent;
    this.actionsById = {};
    this.pluginsByName = {};
    this.schemasByName = {};
    this.valueByTypeAndName = {};
    this.allPluginsInitialized = false;
  }
  /**
   * Creates a new registry overlaid onto the provided registry.
   * @param parent The parent registry.
   * @returns The new overlaid registry.
   */
  static withParent(parent) {
    return new Registry(parent);
  }
  /**
   * Looks up an action in the registry.
   * @param key The key of the action to lookup.
   * @returns The action.
   */
  lookupAction(key) {
    return __async(this, null, function* () {
      var _a;
      const pluginName = parsePluginName(key);
      if (!this.actionsById[key] && pluginName) {
        yield this.initializePlugin(pluginName);
      }
      return this.actionsById[key] || ((_a = this.parent) == null ? void 0 : _a.lookupAction(key));
    });
  }
  /**
   * Registers an action in the registry.
   * @param type The type of the action to register.
   * @param action The action to register.
   */
  registerAction(type, action) {
    const key = `/${type}/${action.__action.name}`;
    logger.debug(`registering ${key}`);
    if (this.actionsById.hasOwnProperty(key)) {
      logger.warn(
        `WARNING: ${key} already has an entry in the registry. Overwriting.`
      );
    }
    this.actionsById[key] = action;
  }
  /**
   * Returns all actions in the registry.
   * @returns All actions in the registry.
   */
  listActions() {
    return __async(this, null, function* () {
      var _a;
      yield this.initializeAllPlugins();
      return __spreadValues(__spreadValues({}, yield (_a = this.parent) == null ? void 0 : _a.listActions()), this.actionsById);
    });
  }
  /**
   * Initializes all plugins in the registry.
   */
  initializeAllPlugins() {
    return __async(this, null, function* () {
      if (this.allPluginsInitialized) {
        return;
      }
      for (const pluginName of Object.keys(this.pluginsByName)) {
        yield this.initializePlugin(pluginName);
      }
      this.allPluginsInitialized = true;
    });
  }
  /**
   * Registers a plugin provider. This plugin must be initialized before it can be used by calling {@link initializePlugin} or {@link initializeAllPlugins}.
   * @param name The name of the plugin to register.
   * @param provider The plugin provider.
   */
  registerPluginProvider(name, provider) {
    if (this.pluginsByName[name]) {
      throw new Error(`Plugin ${name} already registered`);
    }
    this.allPluginsInitialized = false;
    let cached;
    let isInitialized = false;
    this.pluginsByName[name] = {
      name: provider.name,
      initializer: () => {
        if (!isInitialized) {
          cached = provider.initializer();
          isInitialized = true;
        }
        return cached;
      }
    };
  }
  /**
   * Looks up a plugin.
   * @param name The name of the plugin to lookup.
   * @returns The plugin provider.
   */
  lookupPlugin(name) {
    var _a;
    return this.pluginsByName[name] || ((_a = this.parent) == null ? void 0 : _a.lookupPlugin(name));
  }
  /**
   * Initializes a plugin already registered with {@link registerPluginProvider}.
   * @param name The name of the plugin to initialize.
   * @returns The plugin.
   */
  initializePlugin(name) {
    return __async(this, null, function* () {
      if (this.pluginsByName[name]) {
        return yield this.pluginsByName[name].initializer();
      }
    });
  }
  /**
   * Registers a schema.
   * @param name The name of the schema to register.
   * @param data The schema to register (either a Zod schema or a JSON schema).
   */
  registerSchema(name, data) {
    if (this.schemasByName[name]) {
      throw new Error(`Schema ${name} already registered`);
    }
    this.schemasByName[name] = data;
  }
  registerValue(type, name, value) {
    if (!this.valueByTypeAndName[type]) {
      this.valueByTypeAndName[type] = {};
    }
    this.valueByTypeAndName[type][name] = value;
  }
  lookupValue(type, key) {
    return __async(this, null, function* () {
      var _a, _b, _c;
      const pluginName = parsePluginName(key);
      if (!((_a = this.valueByTypeAndName[type]) == null ? void 0 : _a[key]) && pluginName) {
        yield this.initializePlugin(pluginName);
      }
      return ((_b = this.valueByTypeAndName[type]) == null ? void 0 : _b[key]) || ((_c = this.parent) == null ? void 0 : _c.lookupValue(type, key));
    });
  }
  listValues(type) {
    return __async(this, null, function* () {
      var _a;
      yield this.initializeAllPlugins();
      return __spreadValues(__spreadValues({}, (yield (_a = this.parent) == null ? void 0 : _a.listValues(type)) || {}), this.valueByTypeAndName[type] || {});
    });
  }
  /**
   * Looks up a schema.
   * @param name The name of the schema to lookup.
   * @returns The schema.
   */
  lookupSchema(name) {
    var _a;
    return this.schemasByName[name] || ((_a = this.parent) == null ? void 0 : _a.lookupSchema(name));
  }
}
export {
  Registry
};
//# sourceMappingURL=registry.mjs.map