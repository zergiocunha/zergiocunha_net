{"version":3,"sources":["../src/tracing.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport {\n  BatchSpanProcessor,\n  SimpleSpanProcessor,\n  SpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { logger } from './logging.js';\nimport { TelemetryConfig } from './telemetryTypes.js';\nimport { TraceServerExporter } from './tracing/exporter.js';\nimport { isDevEnv } from './utils.js';\n\nexport * from './tracing/exporter.js';\nexport * from './tracing/instrumentation.js';\nexport * from './tracing/processor.js';\nexport * from './tracing/types.js';\n\nlet telemetrySDK: NodeSDK | null = null;\nlet nodeOtelConfig: TelemetryConfig | null = null;\n\nconst instrumentationKey = '__GENKIT_TELEMETRY_INSTRUMENTED';\n\nexport async function ensureBasicTelemetryInstrumentation() {\n  if (global[instrumentationKey]) {\n    return await global[instrumentationKey];\n  }\n  await enableTelemetry({});\n}\n\n/**\n * Enables tracing and metrics open telemetry configuration.\n */\nexport async function enableTelemetry(\n  telemetryConfig: TelemetryConfig | Promise<TelemetryConfig>\n) {\n  global[instrumentationKey] =\n    telemetryConfig instanceof Promise ? telemetryConfig : Promise.resolve();\n\n  telemetryConfig =\n    telemetryConfig instanceof Promise\n      ? await telemetryConfig\n      : telemetryConfig;\n\n  nodeOtelConfig = telemetryConfig || {};\n\n  const processors: SpanProcessor[] = [createTelemetryServerProcessor()];\n  if (nodeOtelConfig.traceExporter) {\n    throw new Error('Please specify spanProcessors instead.');\n  }\n  if (nodeOtelConfig.spanProcessors) {\n    processors.push(...nodeOtelConfig.spanProcessors);\n  }\n  if (nodeOtelConfig.spanProcessor) {\n    processors.push(nodeOtelConfig.spanProcessor);\n    delete nodeOtelConfig.spanProcessor;\n  }\n  nodeOtelConfig.spanProcessors = processors;\n  telemetrySDK = new NodeSDK(nodeOtelConfig);\n  telemetrySDK.start();\n  process.on('SIGTERM', async () => await cleanUpTracing());\n}\n\nexport async function cleanUpTracing(): Promise<void> {\n  return new Promise((resolve) => {\n    if (telemetrySDK) {\n      // Metrics are not flushed as part of the shutdown operation. If metrics\n      // are enabled, we need to manually flush them *before* the reader\n      // receives shutdown order.\n      const metricFlush = maybeFlushMetrics();\n\n      return metricFlush.then(() => {\n        return telemetrySDK!.shutdown().then(() => {\n          logger.debug('OpenTelemetry SDK shut down.');\n          telemetrySDK = null;\n          resolve();\n        });\n      });\n    } else {\n      resolve();\n    }\n  });\n}\n\n/**\n * Creates a new SpanProcessor for exporting data to the telemetry server.\n */\nfunction createTelemetryServerProcessor(): SpanProcessor {\n  const exporter = new TraceServerExporter();\n  return isDevEnv()\n    ? new SimpleSpanProcessor(exporter)\n    : new BatchSpanProcessor(exporter);\n}\n\n/** Flush metrics if present. */\nfunction maybeFlushMetrics(): Promise<void> {\n  if (nodeOtelConfig?.metricReader) {\n    return nodeOtelConfig.metricReader.forceFlush();\n  }\n  return Promise.resolve();\n}\n\n/**\n * Flushes all configured span processors\n */\nexport async function flushTracing() {\n  if (nodeOtelConfig?.spanProcessors) {\n    await Promise.all(nodeOtelConfig.spanProcessors.map((p) => p.forceFlush()));\n  }\n}\n"],"mappings":";;;AAgBA,SAAS,eAAe;AACxB;AAAA,EACE;AAAA,EACA;AAAA,OAEK;AACP,SAAS,cAAc;AAEvB,SAAS,2BAA2B;AACpC,SAAS,gBAAgB;AAEzB,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AAEd,IAAI,eAA+B;AACnC,IAAI,iBAAyC;AAE7C,MAAM,qBAAqB;AAE3B,SAAsB,sCAAsC;AAAA;AAC1D,QAAI,OAAO,kBAAkB,GAAG;AAC9B,aAAO,MAAM,OAAO,kBAAkB;AAAA,IACxC;AACA,UAAM,gBAAgB,CAAC,CAAC;AAAA,EAC1B;AAAA;AAKA,SAAsB,gBACpB,iBACA;AAAA;AACA,WAAO,kBAAkB,IACvB,2BAA2B,UAAU,kBAAkB,QAAQ,QAAQ;AAEzE,sBACE,2BAA2B,UACvB,MAAM,kBACN;AAEN,qBAAiB,mBAAmB,CAAC;AAErC,UAAM,aAA8B,CAAC,+BAA+B,CAAC;AACrE,QAAI,eAAe,eAAe;AAChC,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AACA,QAAI,eAAe,gBAAgB;AACjC,iBAAW,KAAK,GAAG,eAAe,cAAc;AAAA,IAClD;AACA,QAAI,eAAe,eAAe;AAChC,iBAAW,KAAK,eAAe,aAAa;AAC5C,aAAO,eAAe;AAAA,IACxB;AACA,mBAAe,iBAAiB;AAChC,mBAAe,IAAI,QAAQ,cAAc;AACzC,iBAAa,MAAM;AACnB,YAAQ,GAAG,WAAW,MAAS;AAAG,mBAAM,eAAe;AAAA,MAAC;AAAA,EAC1D;AAAA;AAEA,SAAsB,iBAAgC;AAAA;AACpD,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,UAAI,cAAc;AAIhB,cAAM,cAAc,kBAAkB;AAEtC,eAAO,YAAY,KAAK,MAAM;AAC5B,iBAAO,aAAc,SAAS,EAAE,KAAK,MAAM;AACzC,mBAAO,MAAM,8BAA8B;AAC3C,2BAAe;AACf,oBAAQ;AAAA,UACV,CAAC;AAAA,QACH,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAKA,SAAS,iCAAgD;AACvD,QAAM,WAAW,IAAI,oBAAoB;AACzC,SAAO,SAAS,IACZ,IAAI,oBAAoB,QAAQ,IAChC,IAAI,mBAAmB,QAAQ;AACrC;AAGA,SAAS,oBAAmC;AAC1C,MAAI,iDAAgB,cAAc;AAChC,WAAO,eAAe,aAAa,WAAW;AAAA,EAChD;AACA,SAAO,QAAQ,QAAQ;AACzB;AAKA,SAAsB,eAAe;AAAA;AACnC,QAAI,iDAAgB,gBAAgB;AAClC,YAAM,QAAQ,IAAI,eAAe,eAAe,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAAA,IAC5E;AAAA,EACF;AAAA;","names":[]}