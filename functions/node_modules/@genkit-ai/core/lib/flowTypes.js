"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var flowTypes_exports = {};
__export(flowTypes_exports, {
  FlowActionInputSchema: () => FlowActionInputSchema,
  FlowErrorSchema: () => FlowErrorSchema,
  FlowInvokeEnvelopeMessageSchema: () => FlowInvokeEnvelopeMessageSchema,
  FlowResponseSchema: () => FlowResponseSchema,
  FlowResultSchema: () => FlowResultSchema
});
module.exports = __toCommonJS(flowTypes_exports);
var import_zod = require("zod");
const FlowResponseSchema = import_zod.z.object({
  response: import_zod.z.unknown().nullable()
});
const FlowErrorSchema = import_zod.z.object({
  error: import_zod.z.string().optional(),
  stacktrace: import_zod.z.string().optional()
});
const FlowResultSchema = FlowResponseSchema.and(FlowErrorSchema);
const FlowInvokeEnvelopeMessageSchema = import_zod.z.object({
  // Start new flow.
  start: import_zod.z.object({
    input: import_zod.z.unknown().optional(),
    labels: import_zod.z.record(import_zod.z.string(), import_zod.z.string()).optional()
  })
});
const FlowActionInputSchema = FlowInvokeEnvelopeMessageSchema.extend({
  auth: import_zod.z.unknown().optional()
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FlowActionInputSchema,
  FlowErrorSchema,
  FlowInvokeEnvelopeMessageSchema,
  FlowResponseSchema,
  FlowResultSchema
});
//# sourceMappingURL=flowTypes.js.map