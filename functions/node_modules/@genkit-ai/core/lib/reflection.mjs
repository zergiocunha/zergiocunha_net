import {
  __async,
  __spreadValues
} from "./chunk-VQ2XICTI.mjs";
import express from "express";
import fs from "fs/promises";
import getPort, { makeRange } from "get-port";
import path from "path";
import z from "zod";
import { StatusCodes, runWithStreamingCallback } from "./action.js";
import { GENKIT_VERSION } from "./index.js";
import { logger } from "./logging.js";
import { toJsonSchema } from "./schema.js";
import { flushTracing, setTelemetryServerUrl } from "./tracing.js";
const RunActionResponseSchema = z.object({
  result: z.unknown().optional(),
  error: z.unknown().optional(),
  telemetry: z.object({
    traceId: z.string().optional()
  }).optional()
});
const _ReflectionServer = class _ReflectionServer {
  constructor(registry, options) {
    /** Port the server is actually running on. This may differ from `options.port` if the original was occupied. Null if server is not running. */
    this.port = null;
    /** Express server instance. Null if server is not running. */
    this.server = null;
    /** Path to the runtime file. Null if server is not running. */
    this.runtimeFilePath = null;
    this.registry = registry;
    this.options = __spreadValues({
      port: 3100,
      bodyLimit: "30mb",
      configuredEnvs: ["dev"]
    }, options);
  }
  /**
   * Finds a free port to run the server on based on the original chosen port and environment.
   */
  findPort() {
    return __async(this, null, function* () {
      const chosenPort = this.options.port;
      const freePort = yield getPort({
        port: makeRange(chosenPort, chosenPort + 100)
      });
      if (freePort !== chosenPort) {
        logger.warn(
          `Port ${chosenPort} is already in use, using next available port ${freePort} instead.`
        );
      }
      return freePort;
    });
  }
  /**
   * Starts the server.
   *
   * The server will be registered to be shut down on process exit.
   */
  start() {
    return __async(this, null, function* () {
      const server = express();
      server.use(express.json({ limit: this.options.bodyLimit }));
      server.use(function(req, res, next) {
        res.header("x-genkit-version", GENKIT_VERSION);
        next();
      });
      server.get("/api/__health", (_, response) => __async(this, null, function* () {
        yield this.registry.listActions();
        response.status(200).send("OK");
      }));
      server.get("/api/__quitquitquit", (_, response) => __async(this, null, function* () {
        logger.debug("Received quitquitquit");
        response.status(200).send("OK");
        yield this.stop();
      }));
      server.get("/api/actions", (_, response, next) => __async(this, null, function* () {
        logger.debug("Fetching actions.");
        try {
          const actions = yield this.registry.listActions();
          const convertedActions = {};
          Object.keys(actions).forEach((key) => {
            const action = actions[key].__action;
            convertedActions[key] = {
              key,
              name: action.name,
              description: action.description,
              metadata: action.metadata
            };
            if (action.inputSchema || action.inputJsonSchema) {
              convertedActions[key].inputSchema = toJsonSchema({
                schema: action.inputSchema,
                jsonSchema: action.inputJsonSchema
              });
            }
            if (action.outputSchema || action.outputJsonSchema) {
              convertedActions[key].outputSchema = toJsonSchema({
                schema: action.outputSchema,
                jsonSchema: action.outputJsonSchema
              });
            }
          });
          response.send(convertedActions);
        } catch (err) {
          const { message, stack } = err;
          next({ message, stack });
        }
      }));
      server.post("/api/runAction", (request, response, next) => __async(this, null, function* () {
        const { key, input } = request.body;
        const { stream } = request.query;
        logger.debug(`Running action \`${key}\` with stream=${stream}...`);
        let traceId;
        try {
          const action = yield this.registry.lookupAction(key);
          if (!action) {
            response.status(404).send(`action ${key} not found`);
            return;
          }
          if (stream === "true") {
            const result = yield runWithStreamingCallback(
              (chunk) => {
                response.write(JSON.stringify(chunk) + "\n");
              },
              () => __async(this, null, function* () {
                return yield action.run(input);
              })
            );
            yield flushTracing();
            response.write(
              JSON.stringify({
                result: result.result,
                telemetry: {
                  traceId: result.telemetry.traceId
                }
              })
            );
            response.end();
          } else {
            const result = yield action.run(input);
            yield flushTracing();
            response.send({
              result: result.result,
              telemetry: {
                traceId: result.telemetry.traceId
              }
            });
          }
        } catch (err) {
          const { message, stack } = err;
          next({ message, stack, traceId });
        }
      }));
      server.get("/api/envs", (_, response) => __async(this, null, function* () {
        response.json(this.options.configuredEnvs);
      }));
      server.post("/api/notify", (request, response) => __async(this, null, function* () {
        const { telemetryServerUrl } = request.body;
        if (typeof telemetryServerUrl === "string") {
          setTelemetryServerUrl(telemetryServerUrl);
          logger.debug(`Connected to telemetry server on ${telemetryServerUrl}`);
        }
        response.status(200).send("OK");
      }));
      server.use((err, req, res, next) => {
        logger.error(err.stack);
        const error = err;
        const { message, stack } = error;
        const errorResponse = {
          code: StatusCodes.INTERNAL,
          message,
          details: {
            stack
          }
        };
        if (err.traceId) {
          errorResponse.details.traceId = err.traceId;
        }
        res.status(500).json(errorResponse);
      });
      this.port = yield this.findPort();
      this.server = server.listen(this.port, () => __async(this, null, function* () {
        logger.debug(
          `Reflection server (${process.pid}) running on http://localhost:${this.port}`
        );
        _ReflectionServer.RUNNING_SERVERS.push(this);
        yield this.writeRuntimeFile();
      }));
    });
  }
  /**
   * Stops the server and removes it from the list of running servers to clean up on exit.
   */
  stop() {
    return __async(this, null, function* () {
      if (!this.server) {
        return;
      }
      return new Promise((resolve, reject) => __async(this, null, function* () {
        yield this.cleanupRuntimeFile();
        this.server.close((err) => __async(this, null, function* () {
          if (err) {
            logger.error(
              `Error shutting down reflection server on port ${this.port}: ${err}`
            );
            reject(err);
          }
          const index = _ReflectionServer.RUNNING_SERVERS.indexOf(this);
          if (index > -1) {
            _ReflectionServer.RUNNING_SERVERS.splice(index, 1);
          }
          logger.debug(
            `Reflection server on port ${this.port} has successfully shut down.`
          );
          this.port = null;
          this.server = null;
          resolve();
        }));
      }));
    });
  }
  /**
   * Writes the runtime file to the project root.
   */
  writeRuntimeFile() {
    return __async(this, null, function* () {
      try {
        const rootDir = yield findProjectRoot();
        const runtimesDir = path.join(rootDir, ".genkit", "runtimes");
        const date = /* @__PURE__ */ new Date();
        const time = date.getTime();
        const timestamp = date.toISOString();
        this.runtimeFilePath = path.join(
          runtimesDir,
          `${process.pid}-${time}.json`
        );
        const fileContent = JSON.stringify(
          {
            id: process.env.GENKIT_RUNTIME_ID || process.pid.toString(),
            pid: process.pid,
            reflectionServerUrl: `http://localhost:${this.port}`,
            timestamp
          },
          null,
          2
        );
        yield fs.mkdir(runtimesDir, { recursive: true });
        yield fs.writeFile(this.runtimeFilePath, fileContent, "utf8");
        logger.debug(`Runtime file written: ${this.runtimeFilePath}`);
      } catch (error) {
        logger.error(`Error writing runtime file: ${error}`);
      }
    });
  }
  /**
   * Cleans up the port file.
   */
  cleanupRuntimeFile() {
    return __async(this, null, function* () {
      if (!this.runtimeFilePath) {
        return;
      }
      try {
        const fileContent = yield fs.readFile(this.runtimeFilePath, "utf8");
        const data = JSON.parse(fileContent);
        if (data.pid === process.pid) {
          yield fs.unlink(this.runtimeFilePath);
          logger.debug(`Runtime file cleaned up: ${this.runtimeFilePath}`);
        }
      } catch (error) {
        logger.error(`Error cleaning up runtime file: ${error}`);
      }
    });
  }
  /**
   * Stops all running reflection servers.
   */
  static stopAll() {
    return __async(this, null, function* () {
      return Promise.all(
        _ReflectionServer.RUNNING_SERVERS.map((server) => server.stop())
      );
    });
  }
};
/** List of all running servers needed to be cleaned up on process exit. */
_ReflectionServer.RUNNING_SERVERS = [];
let ReflectionServer = _ReflectionServer;
function findProjectRoot() {
  return __async(this, null, function* () {
    let currentDir = process.cwd();
    while (currentDir !== path.parse(currentDir).root) {
      const packageJsonPath = path.join(currentDir, "package.json");
      try {
        yield fs.access(packageJsonPath);
        return currentDir;
      } catch (e) {
        currentDir = path.dirname(currentDir);
      }
    }
    throw new Error("Could not find project root (package.json not found)");
  });
}
if (typeof module !== "undefined" && "hot" in module) {
  module.hot.accept();
  module.hot.dispose(() => __async(void 0, null, function* () {
    logger.debug("Cleaning up reflection server(s) before module reload...");
    yield ReflectionServer.stopAll();
  }));
}
export {
  ReflectionServer,
  RunActionResponseSchema
};
//# sourceMappingURL=reflection.mjs.map