import {
  __async,
  __spreadProps,
  __spreadValues
} from "./chunk-7LUMLJGI.mjs";
import { defineAction, z } from "@genkit-ai/core";
import { toJsonSchema } from "@genkit-ai/core/schema";
import { setCustomMetadataAttributes } from "@genkit-ai/core/tracing";
function asTool(action) {
  var _a, _b;
  if (((_b = (_a = action.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === "tool") {
    return action;
  }
  const fn = (input) => {
    setCustomMetadataAttributes({ subtype: "tool" });
    return action(input);
  };
  fn.__action = __spreadProps(__spreadValues({}, action.__action), {
    metadata: __spreadProps(__spreadValues({}, action.__action.metadata), { type: "tool" })
  });
  return fn;
}
function resolveTools(registry, tools) {
  return __async(this, null, function* () {
    if (!tools || tools.length === 0) {
      return [];
    }
    return yield Promise.all(
      tools.map((ref) => __async(this, null, function* () {
        var _a;
        if (typeof ref === "string") {
          return yield lookupToolByName(registry, ref);
        } else if (ref.__action) {
          return asTool(ref);
        } else if (typeof ref.asTool === "function") {
          return yield ref.asTool();
        } else if (ref.name) {
          return yield lookupToolByName(
            registry,
            ((_a = ref.metadata) == null ? void 0 : _a.originalName) || ref.name
          );
        }
        throw new Error("Tools must be strings, tool definitions, or actions.");
      }))
    );
  });
}
function lookupToolByName(registry, name) {
  return __async(this, null, function* () {
    let tool = (yield registry.lookupAction(name)) || (yield registry.lookupAction(`/tool/${name}`)) || (yield registry.lookupAction(`/prompt/${name}`));
    if (!tool) {
      throw new Error(`Tool ${name} not found`);
    }
    return tool;
  });
}
function toToolDefinition(tool) {
  var _a, _b;
  const originalName = tool.__action.name;
  let name = originalName;
  if (originalName.includes("/")) {
    name = originalName.substring(originalName.lastIndexOf("/") + 1);
  }
  const out = {
    name,
    description: tool.__action.description || "",
    outputSchema: toJsonSchema({
      schema: (_a = tool.__action.outputSchema) != null ? _a : z.void(),
      jsonSchema: tool.__action.outputJsonSchema
    }),
    inputSchema: toJsonSchema({
      schema: (_b = tool.__action.inputSchema) != null ? _b : z.void(),
      jsonSchema: tool.__action.inputJsonSchema
    })
  };
  if (originalName !== name) {
    out.metadata = { originalName };
  }
  return out;
}
function defineTool(registry, config, fn) {
  const a = defineAction(
    registry,
    __spreadProps(__spreadValues({}, config), {
      actionType: "tool",
      metadata: __spreadProps(__spreadValues({}, config.metadata || {}), { type: "tool" })
    }),
    (i) => fn(i)
  );
  return a;
}
export {
  asTool,
  defineTool,
  lookupToolByName,
  resolveTools,
  toToolDefinition
};
//# sourceMappingURL=tool.mjs.map