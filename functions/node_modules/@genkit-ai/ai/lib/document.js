"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var document_exports = {};
__export(document_exports, {
  Document: () => Document,
  DocumentDataSchema: () => DocumentDataSchema,
  MediaPartSchema: () => MediaPartSchema,
  PartSchema: () => PartSchema,
  TextPartSchema: () => TextPartSchema
});
module.exports = __toCommonJS(document_exports);
var import_core = require("@genkit-ai/core");
const EmptyPartSchema = import_core.z.object({
  text: import_core.z.never().optional(),
  media: import_core.z.never().optional()
});
const TextPartSchema = EmptyPartSchema.extend({
  /** The text of the document. */
  text: import_core.z.string()
});
const MediaPartSchema = EmptyPartSchema.extend({
  media: import_core.z.object({
    /** The media content type. Inferred from data uri if not provided. */
    contentType: import_core.z.string().optional(),
    /** A `data:` or `https:` uri containing the media content.  */
    url: import_core.z.string()
  })
});
const PartSchema = import_core.z.union([TextPartSchema, MediaPartSchema]);
const DocumentDataSchema = import_core.z.object({
  content: import_core.z.array(PartSchema),
  metadata: import_core.z.record(import_core.z.string(), import_core.z.any()).optional()
});
class Document {
  constructor(data) {
    this.content = data.content;
    this.metadata = data.metadata;
  }
  static fromText(text, metadata) {
    return new Document({
      content: [{ text }],
      metadata
    });
  }
  /**
   * Concatenates all `text` parts present in the document with no delimiter.
   * @returns A string of all concatenated text parts.
   */
  get text() {
    return this.content.map((part) => part.text || "").join("");
  }
  /**
   * Returns the first media part detected in the document. Useful for extracting
   * (for example) an image.
   * @returns The first detected `media` part in the document.
   */
  get media() {
    var _a;
    return ((_a = this.content.find((part) => part.media)) == null ? void 0 : _a.media) || null;
  }
  toJSON() {
    return {
      content: this.content,
      metadata: this.metadata
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Document,
  DocumentDataSchema,
  MediaPartSchema,
  PartSchema,
  TextPartSchema
});
//# sourceMappingURL=document.js.map