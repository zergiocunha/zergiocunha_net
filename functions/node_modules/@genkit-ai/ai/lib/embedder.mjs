import {
  __async,
  __spreadValues
} from "./chunk-7LUMLJGI.mjs";
import { defineAction, z } from "@genkit-ai/core";
import { Document, DocumentDataSchema } from "./document.js";
const EmbeddingSchema = z.array(z.number());
const EmbedRequestSchema = z.object({
  input: z.array(DocumentDataSchema),
  options: z.any().optional()
});
const EmbedResponseSchema = z.object({
  embeddings: z.array(z.object({ embedding: EmbeddingSchema }))
  // TODO: stats, etc.
});
function withMetadata(embedder, configSchema) {
  const withMeta = embedder;
  withMeta.__configSchema = configSchema;
  return withMeta;
}
function defineEmbedder(registry, options, runner) {
  const embedder = defineAction(
    registry,
    {
      actionType: "embedder",
      name: options.name,
      inputSchema: options.configSchema ? EmbedRequestSchema.extend({
        options: options.configSchema.optional()
      }) : EmbedRequestSchema,
      outputSchema: EmbedResponseSchema,
      metadata: {
        type: "embedder",
        info: options.info
      }
    },
    (i) => runner(
      i.input.map((dd) => new Document(dd)),
      i.options
    )
  );
  const ewm = withMetadata(
    embedder,
    options.configSchema
  );
  return ewm;
}
function embed(registry, params) {
  return __async(this, null, function* () {
    var _a, _b;
    let embedder = yield resolveEmbedder(registry, params);
    if (!embedder.embedderAction) {
      let embedderId;
      if (typeof params.embedder === "string") {
        embedderId = params.embedder;
      } else if ((_b = (_a = params.embedder) == null ? void 0 : _a.__action) == null ? void 0 : _b.name) {
        embedderId = params.embedder.__action.name;
      } else {
        embedderId = params.embedder.name;
      }
      throw new Error(`Unable to resolve embedder ${embedderId}`);
    }
    const response = yield embedder.embedderAction({
      input: typeof params.content === "string" ? [Document.fromText(params.content, params.metadata)] : [params.content],
      options: __spreadValues(__spreadValues({
        version: embedder.version
      }, embedder.config), params.options)
    });
    return response.embeddings[0].embedding;
  });
}
function resolveEmbedder(registry, params) {
  return __async(this, null, function* () {
    if (typeof params.embedder === "string") {
      return {
        embedderAction: yield registry.lookupAction(
          `/embedder/${params.embedder}`
        )
      };
    } else if (Object.hasOwnProperty.call(params.embedder, "__action")) {
      return {
        embedderAction: params.embedder
      };
    } else if (Object.hasOwnProperty.call(params.embedder, "name")) {
      const ref = params.embedder;
      return {
        embedderAction: yield registry.lookupAction(
          `/embedder/${params.embedder.name}`
        ),
        config: __spreadValues({}, ref.config),
        version: ref.version
      };
    }
    throw new Error(`failed to resolve embedder ${params.embedder}`);
  });
}
function embedMany(registry, params) {
  return __async(this, null, function* () {
    let embedder;
    if (typeof params.embedder === "string") {
      embedder = yield registry.lookupAction(`/embedder/${params.embedder}`);
    } else if (Object.hasOwnProperty.call(params.embedder, "info")) {
      embedder = yield registry.lookupAction(
        `/embedder/${params.embedder.name}`
      );
    } else {
      embedder = params.embedder;
    }
    if (!embedder) {
      throw new Error("Unable to utilize the provided embedder");
    }
    const response = yield embedder({
      input: params.content.map(
        (i) => typeof i === "string" ? Document.fromText(i, params.metadata) : i
      ),
      options: params.options
    });
    return response.embeddings;
  });
}
const EmbedderInfoSchema = z.object({
  /** Friendly label for this model (e.g. "Google AI - Gemini Pro") */
  label: z.string().optional(),
  /** Supported model capabilities. */
  supports: z.object({
    /** Model can input this type of data. */
    input: z.array(z.enum(["text", "image"])).optional(),
    /** Model can support multiple languages */
    multilingual: z.boolean().optional()
  }).optional(),
  /** Embedding dimension */
  dimensions: z.number().optional()
});
function embedderRef(options) {
  return __spreadValues({}, options);
}
export {
  EmbedderInfoSchema,
  EmbeddingSchema,
  defineEmbedder,
  embed,
  embedMany,
  embedderRef
};
//# sourceMappingURL=embedder.mjs.map