import {
  __async,
  __objRest,
  __spreadProps,
  __spreadValues
} from "../chunk-7LUMLJGI.mjs";
import { arrayFormatter } from "./array.js";
import { enumFormatter } from "./enum.js";
import { jsonFormatter } from "./json.js";
import { jsonlFormatter } from "./jsonl.js";
import { textFormatter } from "./text.js";
function defineFormat(registry, options, handler) {
  const _a = options, { name } = _a, config = __objRest(_a, ["name"]);
  const formatter = { config, handler };
  registry.registerValue("format", name, formatter);
  return formatter;
}
function resolveFormat(registry, outputOpts) {
  return __async(this, null, function* () {
    if (!outputOpts) return void 0;
    if (outputOpts.schema && !outputOpts.format) {
      return registry.lookupValue("format", "json");
    }
    if (outputOpts.format) {
      return registry.lookupValue("format", outputOpts.format);
    }
    return void 0;
  });
}
function resolveInstructions(format, schema, instructionsOption) {
  if (typeof instructionsOption === "string") return instructionsOption;
  if (instructionsOption === false) return void 0;
  if (!format) return void 0;
  return format.handler(schema).instructions;
}
function injectInstructions(messages, instructions) {
  if (!instructions) return messages;
  if (messages.find(
    (m2) => m2.content.find(
      (p) => {
        var _a, _b;
        return ((_a = p.metadata) == null ? void 0 : _a.purpose) === "output" && !((_b = p.metadata) == null ? void 0 : _b.pending);
      }
    )
  )) {
    return messages;
  }
  const newPart = {
    text: instructions,
    metadata: { purpose: "output" }
  };
  let targetIndex = messages.findIndex((m2) => m2.role === "system");
  if (targetIndex < 0)
    targetIndex = messages.map((m2) => m2.role).lastIndexOf("user");
  if (targetIndex < 0) return messages;
  const m = __spreadProps(__spreadValues({}, messages[targetIndex]), {
    content: [...messages[targetIndex].content]
  });
  const partIndex = m.content.findIndex(
    (p) => {
      var _a, _b;
      return ((_a = p.metadata) == null ? void 0 : _a.purpose) === "output" && ((_b = p.metadata) == null ? void 0 : _b.pending);
    }
  );
  if (partIndex > 0) {
    m.content.splice(partIndex, 1, newPart);
  } else {
    m.content.push(newPart);
  }
  const outMessages = [...messages];
  outMessages.splice(targetIndex, 1, m);
  return outMessages;
}
const DEFAULT_FORMATS = [
  jsonFormatter,
  arrayFormatter,
  textFormatter,
  enumFormatter,
  jsonlFormatter
];
function configureFormats(registry) {
  for (const format of DEFAULT_FORMATS) {
    defineFormat(
      registry,
      __spreadValues({ name: format.name }, format.config),
      format.handler
    );
  }
}
export {
  DEFAULT_FORMATS,
  configureFormats,
  defineFormat,
  injectInstructions,
  resolveFormat,
  resolveInstructions
};
//# sourceMappingURL=index.mjs.map