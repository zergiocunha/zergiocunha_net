"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var tool_exports = {};
__export(tool_exports, {
  asTool: () => asTool,
  defineTool: () => defineTool,
  lookupToolByName: () => lookupToolByName,
  resolveTools: () => resolveTools,
  toToolDefinition: () => toToolDefinition
});
module.exports = __toCommonJS(tool_exports);
var import_core = require("@genkit-ai/core");
var import_schema = require("@genkit-ai/core/schema");
var import_tracing = require("@genkit-ai/core/tracing");
function asTool(action) {
  var _a, _b;
  if (((_b = (_a = action.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === "tool") {
    return action;
  }
  const fn = (input) => {
    (0, import_tracing.setCustomMetadataAttributes)({ subtype: "tool" });
    return action(input);
  };
  fn.__action = __spreadProps(__spreadValues({}, action.__action), {
    metadata: __spreadProps(__spreadValues({}, action.__action.metadata), { type: "tool" })
  });
  return fn;
}
function resolveTools(registry, tools) {
  return __async(this, null, function* () {
    if (!tools || tools.length === 0) {
      return [];
    }
    return yield Promise.all(
      tools.map((ref) => __async(this, null, function* () {
        var _a;
        if (typeof ref === "string") {
          return yield lookupToolByName(registry, ref);
        } else if (ref.__action) {
          return asTool(ref);
        } else if (typeof ref.asTool === "function") {
          return yield ref.asTool();
        } else if (ref.name) {
          return yield lookupToolByName(
            registry,
            ((_a = ref.metadata) == null ? void 0 : _a.originalName) || ref.name
          );
        }
        throw new Error("Tools must be strings, tool definitions, or actions.");
      }))
    );
  });
}
function lookupToolByName(registry, name) {
  return __async(this, null, function* () {
    let tool = (yield registry.lookupAction(name)) || (yield registry.lookupAction(`/tool/${name}`)) || (yield registry.lookupAction(`/prompt/${name}`));
    if (!tool) {
      throw new Error(`Tool ${name} not found`);
    }
    return tool;
  });
}
function toToolDefinition(tool) {
  var _a, _b;
  const originalName = tool.__action.name;
  let name = originalName;
  if (originalName.includes("/")) {
    name = originalName.substring(originalName.lastIndexOf("/") + 1);
  }
  const out = {
    name,
    description: tool.__action.description || "",
    outputSchema: (0, import_schema.toJsonSchema)({
      schema: (_a = tool.__action.outputSchema) != null ? _a : import_core.z.void(),
      jsonSchema: tool.__action.outputJsonSchema
    }),
    inputSchema: (0, import_schema.toJsonSchema)({
      schema: (_b = tool.__action.inputSchema) != null ? _b : import_core.z.void(),
      jsonSchema: tool.__action.inputJsonSchema
    })
  };
  if (originalName !== name) {
    out.metadata = { originalName };
  }
  return out;
}
function defineTool(registry, config, fn) {
  const a = (0, import_core.defineAction)(
    registry,
    __spreadProps(__spreadValues({}, config), {
      actionType: "tool",
      metadata: __spreadProps(__spreadValues({}, config.metadata || {}), { type: "tool" })
    }),
    (i) => fn(i)
  );
  return a;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  asTool,
  defineTool,
  lookupToolByName,
  resolveTools,
  toToolDefinition
});
//# sourceMappingURL=tool.js.map