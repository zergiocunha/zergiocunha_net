{"version":3,"sources":["../src/chat.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from '@genkit-ai/core';\nimport { runInNewSpan } from '@genkit-ai/core/tracing';\nimport {\n  generate,\n  GenerateOptions,\n  GenerateResponse,\n  generateStream,\n  GenerateStreamOptions,\n  GenerateStreamResponse,\n  GenerationCommonConfigSchema,\n  MessageData,\n  Part,\n} from './index.js';\nimport {\n  BaseGenerateOptions,\n  runWithSession,\n  Session,\n  SessionStore,\n} from './session';\n\nexport const MAIN_THREAD = 'main';\n\nexport type ChatGenerateOptions<\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n> = GenerateOptions<O, CustomOptions>;\n\nexport interface PromptRenderOptions<I> {\n  input?: I;\n}\n\nexport type ChatOptions<I = undefined, S = any> = (\n  | PromptRenderOptions<I>\n  | BaseGenerateOptions\n) & {\n  store?: SessionStore<S>;\n  sessionId?: string;\n};\n\n/**\n * Chat encapsulates a statful execution environment for chat.\n * Chat session executed within a session in this environment will have acesss to\n * session convesation history.\n *\n * ```ts\n * const ai = genkit({...});\n * const chat = ai.chat(); // create a Chat\n * let response = await chat.send('hi, my name is Genkit');\n * response = await chat.send('what is my name?'); // chat history aware conversation\n * ```\n */\nexport class Chat {\n  private requestBase?: Promise<BaseGenerateOptions>;\n  readonly sessionId: string;\n  private _messages?: MessageData[];\n  private threadName: string;\n\n  constructor(\n    readonly session: Session,\n    requestBase: Promise<BaseGenerateOptions>,\n    options: {\n      id: string;\n      thread: string;\n      messages?: MessageData[];\n    }\n  ) {\n    this.sessionId = options.id;\n    this.threadName = options.thread;\n    this.requestBase = requestBase?.then((rb) => {\n      const requestBase = { ...rb };\n      // this is handling dotprompt render case\n      if (requestBase && requestBase['prompt']) {\n        const basePrompt = requestBase['prompt'] as string | Part | Part[];\n        let promptMessage: MessageData;\n        if (typeof basePrompt === 'string') {\n          promptMessage = {\n            role: 'user',\n            content: [{ text: basePrompt }],\n          };\n        } else if (Array.isArray(basePrompt)) {\n          promptMessage = {\n            role: 'user',\n            content: basePrompt,\n          };\n        } else {\n          promptMessage = {\n            role: 'user',\n            content: [basePrompt],\n          };\n        }\n        requestBase.messages = [...(requestBase.messages ?? []), promptMessage];\n      }\n      if (hasPreamble(requestBase.messages)) {\n        requestBase.messages = [\n          // if request base contains a preamble, always put it first\n          ...(getPreamble(requestBase.messages) ?? []),\n          // strip out the preamble from history\n          ...(stripPreamble(options.messages) ?? []),\n          // add whatever non-preamble remains from request\n          ...(stripPreamble(requestBase.messages) ?? []),\n        ];\n      } else {\n        requestBase.messages = [\n          ...(options.messages ?? []),\n          ...(requestBase.messages ?? []),\n        ];\n      }\n      this._messages = requestBase.messages;\n      return requestBase;\n    });\n    this._messages = options.messages;\n  }\n\n  async send<\n    O extends z.ZodTypeAny = z.ZodTypeAny,\n    CustomOptions extends z.ZodTypeAny = typeof GenerationCommonConfigSchema,\n  >(\n    options: string | Part[] | ChatGenerateOptions<O, CustomOptions>\n  ): Promise<GenerateResponse<z.infer<O>>> {\n    return runWithSession(this.session, () =>\n      runInNewSpan({ metadata: { name: 'send' } }, async () => {\n        let resolvedOptions;\n        let streamingCallback = undefined;\n\n        // string\n        if (typeof options === 'string') {\n          resolvedOptions = {\n            prompt: options,\n          } as ChatGenerateOptions<O, CustomOptions>;\n        } else if (Array.isArray(options)) {\n          // Part[]\n          resolvedOptions = {\n            prompt: options,\n          } as ChatGenerateOptions<O, CustomOptions>;\n        } else {\n          resolvedOptions = options as ChatGenerateOptions<O, CustomOptions>;\n          streamingCallback = resolvedOptions.streamingCallback;\n        }\n        let request: GenerateOptions = {\n          ...(await this.requestBase),\n          messages: this.messages,\n          ...resolvedOptions,\n        };\n        let response = await generate(this.session.registry, {\n          ...request,\n          streamingCallback,\n        });\n        this.requestBase = Promise.resolve({\n          ...(await this.requestBase),\n          // these things may get changed by tools calling within generate.\n          tools: response?.request?.tools,\n          config: response?.request?.config,\n        });\n        await this.updateMessages(response.messages);\n        return response;\n      })\n    );\n  }\n\n  sendStream<\n    O extends z.ZodTypeAny = z.ZodTypeAny,\n    CustomOptions extends z.ZodTypeAny = typeof GenerationCommonConfigSchema,\n  >(\n    options: string | Part[] | GenerateStreamOptions<O, CustomOptions>\n  ): Promise<GenerateStreamResponse<z.infer<O>>> {\n    return runWithSession(this.session, () =>\n      runInNewSpan({ metadata: { name: 'send' } }, async () => {\n        let resolvedOptions;\n\n        // string\n        if (typeof options === 'string') {\n          resolvedOptions = {\n            prompt: options,\n          } as GenerateStreamOptions<O, CustomOptions>;\n        } else if (Array.isArray(options)) {\n          // Part[]\n          resolvedOptions = {\n            prompt: options,\n          } as GenerateStreamOptions<O, CustomOptions>;\n        } else {\n          resolvedOptions = options as GenerateStreamOptions<O, CustomOptions>;\n        }\n\n        const { response, stream } = await generateStream(\n          this.session.registry,\n          {\n            ...(await this.requestBase),\n            messages: this.messages,\n            ...resolvedOptions,\n          }\n        );\n\n        return {\n          response: response.finally(async () => {\n            const resolvedResponse = await response;\n            this.requestBase = Promise.resolve({\n              ...(await this.requestBase),\n              // these things may get changed by tools calling within generate.\n              tools: resolvedResponse?.request?.tools,\n              config: resolvedResponse?.request?.config,\n            });\n            this.updateMessages(resolvedResponse.messages);\n          }),\n          stream,\n        };\n      })\n    );\n  }\n\n  get messages(): MessageData[] {\n    return this._messages ?? [];\n  }\n\n  async updateMessages(messages: MessageData[]): Promise<void> {\n    this._messages = messages;\n    await this.session.updateMessages(this.threadName, messages);\n  }\n}\n\nfunction hasPreamble(msgs?: MessageData[]) {\n  return !!msgs?.find((m) => m.metadata?.preamble);\n}\n\nfunction getPreamble(msgs?: MessageData[]) {\n  return msgs?.filter((m) => m.metadata?.preamble);\n}\n\nfunction stripPreamble(msgs?: MessageData[]) {\n  return msgs?.filter((m) => !m.metadata?.preamble);\n}\n"],"mappings":"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","names":["requestBase"]}