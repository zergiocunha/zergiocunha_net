import {
  __async,
  __spreadProps,
  __spreadValues
} from "./chunk-7LUMLJGI.mjs";
import { defineAction } from "@genkit-ai/core";
function isPrompt(arg) {
  var _a, _b;
  return typeof arg === "function" && ((_b = (_a = arg.__action) == null ? void 0 : _a.metadata) == null ? void 0 : _b.type) === "prompt";
}
function definePrompt(registry, config, fn) {
  const a = defineAction(
    registry,
    __spreadProps(__spreadValues({}, config), {
      actionType: "prompt",
      metadata: __spreadProps(__spreadValues({}, config.metadata || { prompt: {} }), { type: "prompt" })
    }),
    fn
  );
  return a;
}
function renderPrompt(registry, params) {
  return __async(this, null, function* () {
    var _a, _b;
    let prompt;
    if (typeof params.prompt === "string") {
      prompt = yield registry.lookupAction(`/prompt/${params.prompt}`);
    } else {
      prompt = params.prompt;
    }
    const rendered = yield prompt(
      params.input
    );
    return {
      model: params.model,
      config: __spreadValues(__spreadValues({}, rendered.config || {}), params.config),
      messages: rendered.messages.slice(0, rendered.messages.length - 1),
      prompt: rendered.messages[rendered.messages.length - 1].content,
      docs: params.docs,
      output: {
        format: (_a = rendered.output) == null ? void 0 : _a.format,
        schema: (_b = rendered.output) == null ? void 0 : _b.schema
      },
      tools: rendered.tools || []
    };
  });
}
function isExecutablePrompt(obj) {
  return !!(obj == null ? void 0 : obj.render) && !!(obj == null ? void 0 : obj.asTool) && !!(obj == null ? void 0 : obj.stream);
}
export {
  definePrompt,
  isExecutablePrompt,
  isPrompt,
  renderPrompt
};
//# sourceMappingURL=prompt.mjs.map