{"version":3,"sources":["../src/prompt.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Action, defineAction, JSONSchema7, z } from '@genkit-ai/core';\nimport { Registry } from '@genkit-ai/core/registry';\nimport { DocumentData } from './document.js';\nimport {\n  GenerateOptions,\n  GenerateResponse,\n  GenerateStreamResponse,\n} from './generate.js';\nimport {\n  GenerateRequest,\n  GenerateRequestSchema,\n  GenerateResponseChunkSchema,\n  ModelArgument,\n} from './model.js';\nimport { ToolAction } from './tool.js';\n\nexport type PromptFn<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptionsSchema extends z.ZodTypeAny = z.ZodTypeAny,\n> = (input: z.infer<I>) => Promise<GenerateRequest<CustomOptionsSchema>>;\n\nexport type PromptAction<I extends z.ZodTypeAny = z.ZodTypeAny> = Action<\n  I,\n  typeof GenerateRequestSchema,\n  typeof GenerateResponseChunkSchema\n> & {\n  __action: {\n    metadata: {\n      type: 'prompt';\n    };\n  };\n};\n\n/**\n * Configuration for a prompt action.\n */\nexport interface PromptConfig<I extends z.ZodTypeAny = z.ZodTypeAny> {\n  name: string;\n  description?: string;\n  inputSchema?: I;\n  inputJsonSchema?: JSONSchema7;\n  metadata?: Record<string, any>;\n}\n\nexport function isPrompt(arg: any): boolean {\n  return (\n    typeof arg === 'function' &&\n    (arg as any).__action?.metadata?.type === 'prompt'\n  );\n}\n\nexport type PromptGenerateOptions<\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n> = Omit<GenerateOptions<O, CustomOptions>, 'prompt'>;\n\n/**\n * A prompt that can be executed as a function.\n */\nexport interface ExecutablePrompt<\n  I = undefined,\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n> {\n  /**\n   * Generates a response by rendering the prompt template with given user input and then calling the model.\n   *\n   * @param input Prompt inputs.\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns the model response as a promise of `GenerateStreamResponse`.\n   */\n  (\n    input?: I,\n    opts?: PromptGenerateOptions<O, CustomOptions>\n  ): Promise<GenerateResponse<z.infer<O>>>;\n\n  /**\n   * Generates a response by rendering the prompt template with given user input and then calling the model.\n   * @param input Prompt inputs.\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns the model response as a promise of `GenerateStreamResponse`.\n   */\n  stream(\n    input?: I,\n    opts?: PromptGenerateOptions<O, CustomOptions>\n  ): Promise<GenerateStreamResponse<z.infer<O>>>;\n\n  /**\n   * Renders the prompt template based on user input.\n   *\n   * @param opt Options for the prompt template, including user input variables and custom model configuration options.\n   * @returns a `GenerateOptions` object to be used with the `generate()` function from @genkit-ai/ai.\n   */\n  render(\n    opt: PromptGenerateOptions<O, CustomOptions> & {\n      input?: I;\n    }\n  ): Promise<GenerateOptions<O, CustomOptions>>;\n\n  /**\n   * Returns the prompt usable as a tool.\n   */\n  asTool(): Promise<ToolAction>;\n}\n\n/**\n * Defines and registers a prompt action. The action can be called to obtain\n * a `GenerateRequest` which can be passed to a model action. The given\n * `PromptFn` can perform any action needed to create the request such as rendering\n * a template or fetching a prompt from a database.\n *\n * @returns The new `PromptAction`.\n */\nexport function definePrompt<I extends z.ZodTypeAny>(\n  registry: Registry,\n  config: PromptConfig<I>,\n  fn: PromptFn<I>\n): PromptAction<I> {\n  const a = defineAction(\n    registry,\n    {\n      ...config,\n      actionType: 'prompt',\n      metadata: { ...(config.metadata || { prompt: {} }), type: 'prompt' },\n    },\n    fn\n  );\n  return a as PromptAction<I>;\n}\n\nexport type PromptArgument<I extends z.ZodTypeAny = z.ZodTypeAny> =\n  | string\n  | PromptAction<I>;\n\n/**\n * This veneer renders a `PromptAction` into a `GenerateOptions` object.\n *\n * @returns A promise of an options object for use with the `generate()` function.\n */\nexport async function renderPrompt<\n  I extends z.ZodTypeAny = z.ZodTypeAny,\n  O extends z.ZodTypeAny = z.ZodTypeAny,\n  CustomOptions extends z.ZodTypeAny = z.ZodTypeAny,\n>(\n  registry: Registry,\n  params: {\n    prompt: PromptArgument<I>;\n    input: z.infer<I>;\n    docs?: DocumentData[];\n    model: ModelArgument<CustomOptions>;\n    config?: z.infer<CustomOptions>;\n  }\n): Promise<GenerateOptions<O, CustomOptions>> {\n  let prompt: PromptAction<I>;\n  if (typeof params.prompt === 'string') {\n    prompt = await registry.lookupAction(`/prompt/${params.prompt}`);\n  } else {\n    prompt = params.prompt as PromptAction<I>;\n  }\n  const rendered = (await prompt(\n    params.input\n  )) as GenerateRequest<CustomOptions>;\n  return {\n    model: params.model,\n    config: { ...(rendered.config || {}), ...params.config },\n    messages: rendered.messages.slice(0, rendered.messages.length - 1),\n    prompt: rendered.messages[rendered.messages.length - 1].content,\n    docs: params.docs,\n    output: {\n      format: rendered.output?.format,\n      schema: rendered.output?.schema,\n    },\n    tools: rendered.tools || [],\n  } as GenerateOptions<O, CustomOptions>;\n}\n\nexport function isExecutablePrompt(obj: any): boolean {\n  return (\n    !!(obj as ExecutablePrompt)?.render &&\n    !!(obj as ExecutablePrompt)?.asTool &&\n    !!(obj as ExecutablePrompt)?.stream\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA,kBAAqD;AA4C9C,SAAS,SAAS,KAAmB;AA5D5C;AA6DE,SACE,OAAO,QAAQ,gBACd,eAAY,aAAZ,mBAAsB,aAAtB,mBAAgC,UAAS;AAE9C;AAgEO,SAAS,aACd,UACA,QACA,IACiB;AACjB,QAAM,QAAI;AAAA,IACR;AAAA,IACA,iCACK,SADL;AAAA,MAEE,YAAY;AAAA,MACZ,UAAU,iCAAM,OAAO,YAAY,EAAE,QAAQ,CAAC,EAAE,IAAtC,EAA0C,MAAM,SAAS;AAAA,IACrE;AAAA,IACA;AAAA,EACF;AACA,SAAO;AACT;AAWA,SAAsB,aAKpB,UACA,QAO4C;AAAA;AAxK9C;AAyKE,QAAI;AACJ,QAAI,OAAO,OAAO,WAAW,UAAU;AACrC,eAAS,MAAM,SAAS,aAAa,WAAW,OAAO,MAAM,EAAE;AAAA,IACjE,OAAO;AACL,eAAS,OAAO;AAAA,IAClB;AACA,UAAM,WAAY,MAAM;AAAA,MACtB,OAAO;AAAA,IACT;AACA,WAAO;AAAA,MACL,OAAO,OAAO;AAAA,MACd,QAAQ,kCAAM,SAAS,UAAU,CAAC,IAAO,OAAO;AAAA,MAChD,UAAU,SAAS,SAAS,MAAM,GAAG,SAAS,SAAS,SAAS,CAAC;AAAA,MACjE,QAAQ,SAAS,SAAS,SAAS,SAAS,SAAS,CAAC,EAAE;AAAA,MACxD,MAAM,OAAO;AAAA,MACb,QAAQ;AAAA,QACN,SAAQ,cAAS,WAAT,mBAAiB;AAAA,QACzB,SAAQ,cAAS,WAAT,mBAAiB;AAAA,MAC3B;AAAA,MACA,OAAO,SAAS,SAAS,CAAC;AAAA,IAC5B;AAAA,EACF;AAAA;AAEO,SAAS,mBAAmB,KAAmB;AACpD,SACE,CAAC,EAAE,2BAA0B,WAC7B,CAAC,EAAE,2BAA0B,WAC7B,CAAC,EAAE,2BAA0B;AAEjC;","names":[]}