import {
  __async,
  __spreadProps,
  __spreadValues
} from "../chunk-7LUMLJGI.mjs";
import {
  GenkitError,
  getStreamingCallback,
  runWithStreamingCallback,
  z
} from "@genkit-ai/core";
import { logger } from "@genkit-ai/core/logging";
import { toJsonSchema } from "@genkit-ai/core/schema";
import { SPAN_TYPE_ATTR, runInNewSpan } from "@genkit-ai/core/tracing";
import * as clc from "colorette";
import { DocumentDataSchema } from "../document.js";
import { resolveFormat } from "../formats/index.js";
import {
  GenerateResponse,
  GenerateResponseChunk,
  tagAsPreamble
} from "../generate.js";
import {
  MessageSchema,
  ToolDefinitionSchema,
  resolveModel
} from "../model.js";
import { resolveTools, toToolDefinition } from "../tool.js";
const GenerateUtilParamSchema = z.object({
  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */
  model: z.string(),
  /** Retrieved documents to be used as context for this generation. */
  docs: z.array(DocumentDataSchema).optional(),
  /** Conversation history for multi-turn prompting when supported by the underlying model. */
  messages: z.array(MessageSchema),
  /** List of registered tool names for this generation if supported by the underlying model. */
  tools: z.array(z.union([z.string(), ToolDefinitionSchema])).optional(),
  /** Configuration for the generation request. */
  config: z.any().optional(),
  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */
  output: z.object({
    format: z.string().optional(),
    contentType: z.string().optional(),
    instructions: z.union([z.boolean(), z.string()]).optional(),
    jsonSchema: z.any().optional()
  }).optional(),
  /** When true, return tool calls for manual processing instead of automatically resolving them. */
  returnToolRequests: z.boolean().optional()
});
function generateHelper(registry, input, middleware) {
  return __async(this, null, function* () {
    return yield runInNewSpan(
      {
        metadata: {
          name: "generate"
        },
        labels: {
          [SPAN_TYPE_ATTR]: "helper"
        }
      },
      (metadata) => __async(this, null, function* () {
        metadata.name = "generate";
        metadata.input = input;
        const output = yield generate(registry, input, middleware);
        metadata.output = JSON.stringify(output);
        return output;
      })
    );
  });
}
function generate(registry, rawRequest, middleware) {
  return __async(this, null, function* () {
    var _a, _b, _c, _d, _e;
    const { modelAction: model } = yield resolveModel(registry, rawRequest.model);
    if (((_a = model.__action.metadata) == null ? void 0 : _a.model.stage) === "deprecated") {
      logger.warn(
        `${clc.bold(clc.yellow("Warning:"))} Model '${model.__action.name}' is deprecated and may be removed in a future release.`
      );
    }
    const tools = yield resolveTools(registry, rawRequest.tools);
    const resolvedFormat = yield resolveFormat(registry, rawRequest.output);
    const toolMap = tools.reduce((acc, tool) => {
      const name = tool.__action.name;
      const shortName = name.substring(name.lastIndexOf("/") + 1);
      if (acc[shortName]) {
        throw new GenkitError({
          status: "INVALID_ARGUMENT",
          message: `Cannot provide two tools with the same name: '${name}' and '${acc[shortName]}'`
        });
      }
      acc[shortName] = tool;
      return acc;
    }, {});
    const request = yield actionToGenerateRequest(
      rawRequest,
      tools,
      resolvedFormat
    );
    const accumulatedChunks = [];
    const streamingCallback = getStreamingCallback();
    const response = yield runWithStreamingCallback(
      streamingCallback ? (chunk) => {
        var _a2;
        if (streamingCallback) {
          streamingCallback(
            new GenerateResponseChunk(chunk, {
              index: 0,
              role: "model",
              previousChunks: accumulatedChunks,
              parser: resolvedFormat == null ? void 0 : resolvedFormat.handler((_a2 = request.output) == null ? void 0 : _a2.schema).parseChunk
            })
          );
        }
        accumulatedChunks.push(chunk);
      } : void 0,
      () => __async(this, null, function* () {
        var _a2;
        const dispatch = (index, req) => __async(this, null, function* () {
          if (!middleware || index === middleware.length) {
            return yield model(req);
          }
          const currentMiddleware = middleware[index];
          return currentMiddleware(
            req,
            (modifiedReq) => __async(this, null, function* () {
              return dispatch(index + 1, modifiedReq || req);
            })
          );
        });
        return new GenerateResponse(yield dispatch(0, request), {
          request,
          parser: resolvedFormat == null ? void 0 : resolvedFormat.handler((_a2 = request.output) == null ? void 0 : _a2.schema).parseMessage
        });
      })
    );
    response.assertValid(request);
    const message = response.message;
    const toolCalls = message.content.filter((part) => !!part.toolRequest);
    if (rawRequest.returnToolRequests || toolCalls.length === 0) {
      return response.toJSON();
    }
    const toolResponses = [];
    let messages = [...request.messages, message];
    let newTools = rawRequest.tools;
    for (const part of toolCalls) {
      if (!part.toolRequest) {
        throw Error(
          "Tool request expected but not provided in tool request part"
        );
      }
      const tool = toolMap[(_b = part.toolRequest) == null ? void 0 : _b.name];
      if (!tool) {
        throw Error(`Tool ${(_c = part.toolRequest) == null ? void 0 : _c.name} not found`);
      }
      if (tool.__action.metadata.type === "prompt") {
        const newPreamble = yield tool((_d = part.toolRequest) == null ? void 0 : _d.input);
        toolResponses.push({
          toolResponse: {
            name: part.toolRequest.name,
            ref: part.toolRequest.ref,
            output: `transferred to ${part.toolRequest.name}`
          }
        });
        messages = [
          ...tagAsPreamble(newPreamble.messages),
          ...messages.filter((m) => {
            var _a2;
            return !((_a2 = m == null ? void 0 : m.metadata) == null ? void 0 : _a2.preamble);
          })
        ];
        newTools = newPreamble.tools;
      } else {
        toolResponses.push({
          toolResponse: {
            name: part.toolRequest.name,
            ref: part.toolRequest.ref,
            output: yield tool((_e = part.toolRequest) == null ? void 0 : _e.input)
          }
        });
      }
    }
    const nextRequest = __spreadProps(__spreadValues({}, rawRequest), {
      messages: [
        ...messages,
        {
          role: "tool",
          content: toolResponses
        }
      ],
      tools: newTools
    });
    return yield generateHelper(registry, nextRequest, middleware);
  });
}
function actionToGenerateRequest(options, resolvedTools, resolvedFormat) {
  return __async(this, null, function* () {
    var _a;
    const out = {
      messages: options.messages,
      config: options.config,
      docs: options.docs,
      tools: (resolvedTools == null ? void 0 : resolvedTools.map(toToolDefinition)) || [],
      output: __spreadProps(__spreadValues({}, (resolvedFormat == null ? void 0 : resolvedFormat.config) || {}), {
        schema: toJsonSchema({
          jsonSchema: (_a = options.output) == null ? void 0 : _a.jsonSchema
        })
      })
    };
    if (!out.output.schema) delete out.output.schema;
    return out;
  });
}
function inferRoleFromParts(parts) {
  const uniqueRoles = /* @__PURE__ */ new Set();
  for (const part of parts) {
    const role = getRoleFromPart(part);
    uniqueRoles.add(role);
    if (uniqueRoles.size > 1) {
      throw new Error("Contents contain mixed roles");
    }
  }
  return Array.from(uniqueRoles)[0];
}
function getRoleFromPart(part) {
  if (part.toolRequest !== void 0) return "model";
  if (part.toolResponse !== void 0) return "tool";
  if (part.text !== void 0) return "user";
  if (part.media !== void 0) return "user";
  if (part.data !== void 0) return "user";
  throw new Error("No recognized fields in content");
}
export {
  GenerateUtilParamSchema,
  generateHelper,
  inferRoleFromParts
};
//# sourceMappingURL=action.mjs.map