{"version":3,"sources":["../../src/generate/response.ts"],"sourcesContent":["/**\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { parseSchema } from '@genkit-ai/core/schema';\nimport {\n  GenerationBlockedError,\n  GenerationResponseError,\n} from '../generate.js';\nimport { Message, MessageParser } from '../message.js';\nimport {\n  GenerateRequest,\n  GenerateResponseData,\n  GenerationUsage,\n  MessageData,\n  ModelResponseData,\n  ToolRequestPart,\n} from '../model.js';\n\n/**\n * GenerateResponse is the result from a `generate()` call and contains one or\n * more generated candidate messages.\n */\nexport class GenerateResponse<O = unknown> implements ModelResponseData {\n  /** The generated message. */\n  message?: Message<O>;\n  /** The reason generation stopped for this request. */\n  finishReason: ModelResponseData['finishReason'];\n  /** Additional information about why the model stopped generating, if any. */\n  finishMessage?: string;\n  /** Usage information. */\n  usage: GenerationUsage;\n  /** Provider-specific response data. */\n  custom: unknown;\n  /** The request that generated this response. */\n  request?: GenerateRequest;\n  /** The parser for output parsing of this response. */\n  parser?: MessageParser<O>;\n\n  constructor(\n    response: GenerateResponseData,\n    options?: {\n      request?: GenerateRequest;\n      parser?: MessageParser<O>;\n    }\n  ) {\n    // Check for candidates in addition to message for backwards compatibility.\n    const generatedMessage =\n      response.message || response.candidates?.[0]?.message;\n    if (generatedMessage) {\n      this.message = new Message<O>(generatedMessage, {\n        parser: options?.parser,\n      });\n    }\n    this.finishReason =\n      response.finishReason || response.candidates?.[0]?.finishReason!;\n    this.finishMessage =\n      response.finishMessage || response.candidates?.[0]?.finishMessage;\n    this.usage = response.usage || {};\n    this.custom = response.custom || {};\n    this.request = options?.request;\n  }\n\n  private get assertMessage(): Message<O> {\n    if (!this.message)\n      throw new Error(\n        'Operation could not be completed because the response does not contain a generated message.'\n      );\n    return this.message;\n  }\n\n  /**\n   * Throws an error if the response does not contain valid output.\n   */\n  assertValid(request?: GenerateRequest): void {\n    if (this.finishReason === 'blocked') {\n      throw new GenerationBlockedError(\n        this,\n        `Generation blocked${this.finishMessage ? `: ${this.finishMessage}` : '.'}`\n      );\n    }\n\n    if (!this.message) {\n      throw new GenerationResponseError(\n        this,\n        `Model did not generate a message. Finish reason: '${this.finishReason}': ${this.finishMessage}`\n      );\n    }\n\n    if (request?.output?.schema || this.request?.output?.schema) {\n      const o = this.output;\n      parseSchema(o, {\n        jsonSchema: request?.output?.schema || this.request?.output?.schema,\n      });\n    }\n  }\n\n  isValid(request?: GenerateRequest): boolean {\n    try {\n      this.assertValid(request);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * If the selected candidate's message contains a `data` part, it is returned. Otherwise,\n   * the `output()` method extracts the first valid JSON object or array from the text\n   * contained in the selected candidate's message and returns it.\n   *\n   * @param index The candidate index from which to extract output. If not provided, finds first candidate that conforms to output schema.\n   * @returns The structured output contained in the selected candidate.\n   */\n  get output(): O | null {\n    return this.message?.output || null;\n  }\n\n  /**\n   * Concatenates all `text` parts present in the candidate's message with no delimiter.\n   * @param index The candidate index from which to extract text, defaults to first candidate.\n   * @returns A string of all concatenated text parts.\n   */\n  get text(): string {\n    return this.message?.text || '';\n  }\n\n  /**\n   * Returns the first detected media part in the selected candidate's message. Useful for\n   * extracting (for example) an image from a generation expected to create one.\n   * @param index The candidate index from which to extract media, defaults to first candidate.\n   * @returns The first detected `media` part in the candidate.\n   */\n  get media(): { url: string; contentType?: string } | null {\n    return this.message?.media || null;\n  }\n\n  /**\n   * Returns the first detected `data` part of the selected candidate's message.\n   * @param index The candidate index from which to extract data, defaults to first candidate.\n   * @returns The first `data` part detected in the candidate (if any).\n   */\n  get data(): O | null {\n    return this.message?.data || null;\n  }\n\n  /**\n   * Returns all tool request found in the candidate.\n   * @param index The candidate index from which to extract tool requests, defaults to first candidate.\n   * @returns Array of all tool request found in the candidate.\n   */\n  get toolRequests(): ToolRequestPart[] {\n    return this.message?.toolRequests || [];\n  }\n\n  /**\n   * Appends the message generated by the selected candidate to the messages already\n   * present in the generation request. The result of this method can be safely\n   * serialized to JSON for persistence in a database.\n   * @param index The candidate index to utilize during conversion, defaults to first candidate.\n   * @returns A serializable list of messages compatible with `generate({history})`.\n   */\n  get messages(): MessageData[] {\n    if (!this.request)\n      throw new Error(\n        \"Can't construct history for response without request reference.\"\n      );\n    if (!this.message)\n      throw new Error(\n        \"Can't construct history for response without generated message.\"\n      );\n    return [...this.request?.messages, this.message.toJSON()];\n  }\n\n  get raw(): unknown {\n    return this.raw ?? this.custom;\n  }\n\n  toJSON(): ModelResponseData {\n    const out = {\n      message: this.message?.toJSON(),\n      finishReason: this.finishReason,\n      finishMessage: this.finishMessage,\n      usage: this.usage,\n      custom: (this.custom as { toJSON?: () => any }).toJSON?.() || this.custom,\n      request: this.request,\n    };\n    if (!out.finishMessage) delete out.finishMessage;\n    if (!out.request) delete out.request;\n    return out;\n  }\n}\n"],"mappings":"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","names":[]}