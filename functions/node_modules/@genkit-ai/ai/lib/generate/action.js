"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var action_exports = {};
__export(action_exports, {
  GenerateUtilParamSchema: () => GenerateUtilParamSchema,
  generateHelper: () => generateHelper,
  inferRoleFromParts: () => inferRoleFromParts
});
module.exports = __toCommonJS(action_exports);
var import_core = require("@genkit-ai/core");
var import_logging = require("@genkit-ai/core/logging");
var import_schema = require("@genkit-ai/core/schema");
var import_tracing = require("@genkit-ai/core/tracing");
var clc = __toESM(require("colorette"));
var import_document = require("../document.js");
var import_formats = require("../formats/index.js");
var import_generate = require("../generate.js");
var import_model = require("../model.js");
var import_tool = require("../tool.js");
const GenerateUtilParamSchema = import_core.z.object({
  /** A model name (e.g. `vertexai/gemini-1.0-pro`). */
  model: import_core.z.string(),
  /** Retrieved documents to be used as context for this generation. */
  docs: import_core.z.array(import_document.DocumentDataSchema).optional(),
  /** Conversation history for multi-turn prompting when supported by the underlying model. */
  messages: import_core.z.array(import_model.MessageSchema),
  /** List of registered tool names for this generation if supported by the underlying model. */
  tools: import_core.z.array(import_core.z.union([import_core.z.string(), import_model.ToolDefinitionSchema])).optional(),
  /** Configuration for the generation request. */
  config: import_core.z.any().optional(),
  /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */
  output: import_core.z.object({
    format: import_core.z.string().optional(),
    contentType: import_core.z.string().optional(),
    instructions: import_core.z.union([import_core.z.boolean(), import_core.z.string()]).optional(),
    jsonSchema: import_core.z.any().optional()
  }).optional(),
  /** When true, return tool calls for manual processing instead of automatically resolving them. */
  returnToolRequests: import_core.z.boolean().optional()
});
function generateHelper(registry, input, middleware) {
  return __async(this, null, function* () {
    return yield (0, import_tracing.runInNewSpan)(
      {
        metadata: {
          name: "generate"
        },
        labels: {
          [import_tracing.SPAN_TYPE_ATTR]: "helper"
        }
      },
      (metadata) => __async(this, null, function* () {
        metadata.name = "generate";
        metadata.input = input;
        const output = yield generate(registry, input, middleware);
        metadata.output = JSON.stringify(output);
        return output;
      })
    );
  });
}
function generate(registry, rawRequest, middleware) {
  return __async(this, null, function* () {
    var _a, _b, _c, _d, _e;
    const { modelAction: model } = yield (0, import_model.resolveModel)(registry, rawRequest.model);
    if (((_a = model.__action.metadata) == null ? void 0 : _a.model.stage) === "deprecated") {
      import_logging.logger.warn(
        `${clc.bold(clc.yellow("Warning:"))} Model '${model.__action.name}' is deprecated and may be removed in a future release.`
      );
    }
    const tools = yield (0, import_tool.resolveTools)(registry, rawRequest.tools);
    const resolvedFormat = yield (0, import_formats.resolveFormat)(registry, rawRequest.output);
    const toolMap = tools.reduce((acc, tool) => {
      const name = tool.__action.name;
      const shortName = name.substring(name.lastIndexOf("/") + 1);
      if (acc[shortName]) {
        throw new import_core.GenkitError({
          status: "INVALID_ARGUMENT",
          message: `Cannot provide two tools with the same name: '${name}' and '${acc[shortName]}'`
        });
      }
      acc[shortName] = tool;
      return acc;
    }, {});
    const request = yield actionToGenerateRequest(
      rawRequest,
      tools,
      resolvedFormat
    );
    const accumulatedChunks = [];
    const streamingCallback = (0, import_core.getStreamingCallback)();
    const response = yield (0, import_core.runWithStreamingCallback)(
      streamingCallback ? (chunk) => {
        var _a2;
        if (streamingCallback) {
          streamingCallback(
            new import_generate.GenerateResponseChunk(chunk, {
              index: 0,
              role: "model",
              previousChunks: accumulatedChunks,
              parser: resolvedFormat == null ? void 0 : resolvedFormat.handler((_a2 = request.output) == null ? void 0 : _a2.schema).parseChunk
            })
          );
        }
        accumulatedChunks.push(chunk);
      } : void 0,
      () => __async(this, null, function* () {
        var _a2;
        const dispatch = (index, req) => __async(this, null, function* () {
          if (!middleware || index === middleware.length) {
            return yield model(req);
          }
          const currentMiddleware = middleware[index];
          return currentMiddleware(
            req,
            (modifiedReq) => __async(this, null, function* () {
              return dispatch(index + 1, modifiedReq || req);
            })
          );
        });
        return new import_generate.GenerateResponse(yield dispatch(0, request), {
          request,
          parser: resolvedFormat == null ? void 0 : resolvedFormat.handler((_a2 = request.output) == null ? void 0 : _a2.schema).parseMessage
        });
      })
    );
    response.assertValid(request);
    const message = response.message;
    const toolCalls = message.content.filter((part) => !!part.toolRequest);
    if (rawRequest.returnToolRequests || toolCalls.length === 0) {
      return response.toJSON();
    }
    const toolResponses = [];
    let messages = [...request.messages, message];
    let newTools = rawRequest.tools;
    for (const part of toolCalls) {
      if (!part.toolRequest) {
        throw Error(
          "Tool request expected but not provided in tool request part"
        );
      }
      const tool = toolMap[(_b = part.toolRequest) == null ? void 0 : _b.name];
      if (!tool) {
        throw Error(`Tool ${(_c = part.toolRequest) == null ? void 0 : _c.name} not found`);
      }
      if (tool.__action.metadata.type === "prompt") {
        const newPreamble = yield tool((_d = part.toolRequest) == null ? void 0 : _d.input);
        toolResponses.push({
          toolResponse: {
            name: part.toolRequest.name,
            ref: part.toolRequest.ref,
            output: `transferred to ${part.toolRequest.name}`
          }
        });
        messages = [
          ...(0, import_generate.tagAsPreamble)(newPreamble.messages),
          ...messages.filter((m) => {
            var _a2;
            return !((_a2 = m == null ? void 0 : m.metadata) == null ? void 0 : _a2.preamble);
          })
        ];
        newTools = newPreamble.tools;
      } else {
        toolResponses.push({
          toolResponse: {
            name: part.toolRequest.name,
            ref: part.toolRequest.ref,
            output: yield tool((_e = part.toolRequest) == null ? void 0 : _e.input)
          }
        });
      }
    }
    const nextRequest = __spreadProps(__spreadValues({}, rawRequest), {
      messages: [
        ...messages,
        {
          role: "tool",
          content: toolResponses
        }
      ],
      tools: newTools
    });
    return yield generateHelper(registry, nextRequest, middleware);
  });
}
function actionToGenerateRequest(options, resolvedTools, resolvedFormat) {
  return __async(this, null, function* () {
    var _a;
    const out = {
      messages: options.messages,
      config: options.config,
      docs: options.docs,
      tools: (resolvedTools == null ? void 0 : resolvedTools.map(import_tool.toToolDefinition)) || [],
      output: __spreadProps(__spreadValues({}, (resolvedFormat == null ? void 0 : resolvedFormat.config) || {}), {
        schema: (0, import_schema.toJsonSchema)({
          jsonSchema: (_a = options.output) == null ? void 0 : _a.jsonSchema
        })
      })
    };
    if (!out.output.schema) delete out.output.schema;
    return out;
  });
}
function inferRoleFromParts(parts) {
  const uniqueRoles = /* @__PURE__ */ new Set();
  for (const part of parts) {
    const role = getRoleFromPart(part);
    uniqueRoles.add(role);
    if (uniqueRoles.size > 1) {
      throw new Error("Contents contain mixed roles");
    }
  }
  return Array.from(uniqueRoles)[0];
}
function getRoleFromPart(part) {
  if (part.toolRequest !== void 0) return "model";
  if (part.toolResponse !== void 0) return "tool";
  if (part.text !== void 0) return "user";
  if (part.media !== void 0) return "user";
  if (part.data !== void 0) return "user";
  throw new Error("No recognized fields in content");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenerateUtilParamSchema,
  generateHelper,
  inferRoleFromParts
});
//# sourceMappingURL=action.js.map