import { z } from '@genkit-ai/core';
import { Registry } from '@genkit-ai/core/registry';
import { ModelMiddleware, GenerateResponseData, Part, Role } from '../model.js';

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare const GenerateUtilParamSchema: z.ZodObject<{
    /** A model name (e.g. `vertexai/gemini-1.0-pro`). */
    model: z.ZodString;
    /** Retrieved documents to be used as context for this generation. */
    docs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        content: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
        }, {
            text: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            text: string;
            media?: undefined;
        }, {
            text: string;
            media?: undefined;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
        }, {
            media: z.ZodObject<{
                contentType: z.ZodOptional<z.ZodString>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                contentType?: string | undefined;
            }, {
                url: string;
                contentType?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        }, {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        }>]>, "many">;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        content: ({
            text: string;
            media?: undefined;
        } | {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        })[];
        metadata?: Record<string, any> | undefined;
    }, {
        content: ({
            text: string;
            media?: undefined;
        } | {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        })[];
        metadata?: Record<string, any> | undefined;
    }>, "many">>;
    /** Conversation history for multi-turn prompting when supported by the underlying model. */
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["system", "user", "model", "tool"]>;
        content: z.ZodArray<z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            text: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }, {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            media: z.ZodObject<{
                contentType: z.ZodOptional<z.ZodString>;
                url: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                url: string;
                contentType?: string | undefined;
            }, {
                url: string;
                contentType?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }, {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            toolRequest: z.ZodObject<{
                ref: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                input: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            }, {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        }, {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            toolResponse: z.ZodObject<{
                ref: z.ZodOptional<z.ZodString>;
                name: z.ZodString;
                output: z.ZodOptional<z.ZodUnknown>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            }, {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            }>;
        }>, "strip", z.ZodTypeAny, {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        }, {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            data: z.ZodUnknown;
        }>, "strip", z.ZodTypeAny, {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }, {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }>, z.ZodObject<z.objectUtil.extendShape<{
            text: z.ZodOptional<z.ZodNever>;
            media: z.ZodOptional<z.ZodNever>;
            toolRequest: z.ZodOptional<z.ZodNever>;
            toolResponse: z.ZodOptional<z.ZodNever>;
            data: z.ZodOptional<z.ZodUnknown>;
            metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            custom: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, {
            custom: z.ZodRecord<z.ZodString, z.ZodAny>;
        }>, "strip", z.ZodTypeAny, {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }, {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        }>]>, "many">;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        content: ({
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        } | {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        })[];
        role: "model" | "tool" | "system" | "user";
        metadata?: Record<string, unknown> | undefined;
    }, {
        content: ({
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        } | {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        })[];
        role: "model" | "tool" | "system" | "user";
        metadata?: Record<string, unknown> | undefined;
    }>, "many">;
    /** List of registered tool names for this generation if supported by the underlying model. */
    tools: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
        name: z.ZodString;
        description: z.ZodString;
        inputSchema: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        outputSchema: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
        metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        description: string;
        name: string;
        metadata?: Record<string, any> | undefined;
        inputSchema?: Record<string, any> | null | undefined;
        outputSchema?: Record<string, any> | null | undefined;
    }, {
        description: string;
        name: string;
        metadata?: Record<string, any> | undefined;
        inputSchema?: Record<string, any> | null | undefined;
        outputSchema?: Record<string, any> | null | undefined;
    }>]>, "many">>;
    /** Configuration for the generation request. */
    config: z.ZodOptional<z.ZodAny>;
    /** Configuration for the desired output of the request. Defaults to the model's default output if unspecified. */
    output: z.ZodOptional<z.ZodObject<{
        format: z.ZodOptional<z.ZodString>;
        contentType: z.ZodOptional<z.ZodString>;
        instructions: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        jsonSchema: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        contentType?: string | undefined;
        format?: string | undefined;
        instructions?: string | boolean | undefined;
        jsonSchema?: any;
    }, {
        contentType?: string | undefined;
        format?: string | undefined;
        instructions?: string | boolean | undefined;
        jsonSchema?: any;
    }>>;
    /** When true, return tool calls for manual processing instead of automatically resolving them. */
    returnToolRequests: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    model: string;
    messages: {
        content: ({
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        } | {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        })[];
        role: "model" | "tool" | "system" | "user";
        metadata?: Record<string, unknown> | undefined;
    }[];
    config?: any;
    output?: {
        contentType?: string | undefined;
        format?: string | undefined;
        instructions?: string | boolean | undefined;
        jsonSchema?: any;
    } | undefined;
    tools?: (string | {
        description: string;
        name: string;
        metadata?: Record<string, any> | undefined;
        inputSchema?: Record<string, any> | null | undefined;
        outputSchema?: Record<string, any> | null | undefined;
    })[] | undefined;
    docs?: {
        content: ({
            text: string;
            media?: undefined;
        } | {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        })[];
        metadata?: Record<string, any> | undefined;
    }[] | undefined;
    returnToolRequests?: boolean | undefined;
}, {
    model: string;
    messages: {
        content: ({
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            text: string;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolRequest: {
                name: string;
                input?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            toolResponse: {
                name: string;
                output?: unknown;
                ref?: string | undefined;
            };
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            data?: unknown;
        } | {
            text?: undefined;
            media?: undefined;
            custom?: Record<string, unknown> | undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        } | {
            custom: Record<string, any>;
            text?: undefined;
            media?: undefined;
            metadata?: Record<string, unknown> | undefined;
            toolRequest?: undefined;
            toolResponse?: undefined;
            data?: unknown;
        })[];
        role: "model" | "tool" | "system" | "user";
        metadata?: Record<string, unknown> | undefined;
    }[];
    config?: any;
    output?: {
        contentType?: string | undefined;
        format?: string | undefined;
        instructions?: string | boolean | undefined;
        jsonSchema?: any;
    } | undefined;
    tools?: (string | {
        description: string;
        name: string;
        metadata?: Record<string, any> | undefined;
        inputSchema?: Record<string, any> | null | undefined;
        outputSchema?: Record<string, any> | null | undefined;
    })[] | undefined;
    docs?: {
        content: ({
            text: string;
            media?: undefined;
        } | {
            media: {
                url: string;
                contentType?: string | undefined;
            };
            text?: undefined;
        })[];
        metadata?: Record<string, any> | undefined;
    }[] | undefined;
    returnToolRequests?: boolean | undefined;
}>;
/**
 * Encapsulates all generate logic. This is similar to `generateAction` except not an action and can take middleware.
 */
declare function generateHelper(registry: Registry, input: z.infer<typeof GenerateUtilParamSchema>, middleware?: ModelMiddleware[]): Promise<GenerateResponseData>;
declare function inferRoleFromParts(parts: Part[]): Role;

export { GenerateUtilParamSchema, generateHelper, inferRoleFromParts };
