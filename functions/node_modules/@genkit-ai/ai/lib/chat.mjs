import {
  __async,
  __spreadProps,
  __spreadValues
} from "./chunk-7LUMLJGI.mjs";
import { runInNewSpan } from "@genkit-ai/core/tracing";
import {
  generate,
  generateStream
} from "./index.js";
import {
  runWithSession
} from "./session";
const MAIN_THREAD = "main";
class Chat {
  constructor(session, requestBase, options) {
    this.session = session;
    this.sessionId = options.id;
    this.threadName = options.thread;
    this.requestBase = requestBase == null ? void 0 : requestBase.then((rb) => {
      var _a, _b, _c, _d, _e, _f;
      const requestBase2 = __spreadValues({}, rb);
      if (requestBase2 && requestBase2["prompt"]) {
        const basePrompt = requestBase2["prompt"];
        let promptMessage;
        if (typeof basePrompt === "string") {
          promptMessage = {
            role: "user",
            content: [{ text: basePrompt }]
          };
        } else if (Array.isArray(basePrompt)) {
          promptMessage = {
            role: "user",
            content: basePrompt
          };
        } else {
          promptMessage = {
            role: "user",
            content: [basePrompt]
          };
        }
        requestBase2.messages = [...(_a = requestBase2.messages) != null ? _a : [], promptMessage];
      }
      if (hasPreamble(requestBase2.messages)) {
        requestBase2.messages = [
          // if request base contains a preamble, always put it first
          ...(_b = getPreamble(requestBase2.messages)) != null ? _b : [],
          // strip out the preamble from history
          ...(_c = stripPreamble(options.messages)) != null ? _c : [],
          // add whatever non-preamble remains from request
          ...(_d = stripPreamble(requestBase2.messages)) != null ? _d : []
        ];
      } else {
        requestBase2.messages = [
          ...(_e = options.messages) != null ? _e : [],
          ...(_f = requestBase2.messages) != null ? _f : []
        ];
      }
      this._messages = requestBase2.messages;
      return requestBase2;
    });
    this._messages = options.messages;
  }
  send(options) {
    return __async(this, null, function* () {
      return runWithSession(
        this.session,
        () => runInNewSpan({ metadata: { name: "send" } }, () => __async(this, null, function* () {
          var _a, _b;
          let resolvedOptions;
          let streamingCallback = void 0;
          if (typeof options === "string") {
            resolvedOptions = {
              prompt: options
            };
          } else if (Array.isArray(options)) {
            resolvedOptions = {
              prompt: options
            };
          } else {
            resolvedOptions = options;
            streamingCallback = resolvedOptions.streamingCallback;
          }
          let request = __spreadValues(__spreadProps(__spreadValues({}, yield this.requestBase), {
            messages: this.messages
          }), resolvedOptions);
          let response = yield generate(this.session.registry, __spreadProps(__spreadValues({}, request), {
            streamingCallback
          }));
          this.requestBase = Promise.resolve(__spreadProps(__spreadValues({}, yield this.requestBase), {
            // these things may get changed by tools calling within generate.
            tools: (_a = response == null ? void 0 : response.request) == null ? void 0 : _a.tools,
            config: (_b = response == null ? void 0 : response.request) == null ? void 0 : _b.config
          }));
          yield this.updateMessages(response.messages);
          return response;
        }))
      );
    });
  }
  sendStream(options) {
    return runWithSession(
      this.session,
      () => runInNewSpan({ metadata: { name: "send" } }, () => __async(this, null, function* () {
        let resolvedOptions;
        if (typeof options === "string") {
          resolvedOptions = {
            prompt: options
          };
        } else if (Array.isArray(options)) {
          resolvedOptions = {
            prompt: options
          };
        } else {
          resolvedOptions = options;
        }
        const { response, stream } = yield generateStream(
          this.session.registry,
          __spreadValues(__spreadProps(__spreadValues({}, yield this.requestBase), {
            messages: this.messages
          }), resolvedOptions)
        );
        return {
          response: response.finally(() => __async(this, null, function* () {
            var _a, _b;
            const resolvedResponse = yield response;
            this.requestBase = Promise.resolve(__spreadProps(__spreadValues({}, yield this.requestBase), {
              // these things may get changed by tools calling within generate.
              tools: (_a = resolvedResponse == null ? void 0 : resolvedResponse.request) == null ? void 0 : _a.tools,
              config: (_b = resolvedResponse == null ? void 0 : resolvedResponse.request) == null ? void 0 : _b.config
            }));
            this.updateMessages(resolvedResponse.messages);
          })),
          stream
        };
      }))
    );
  }
  get messages() {
    var _a;
    return (_a = this._messages) != null ? _a : [];
  }
  updateMessages(messages) {
    return __async(this, null, function* () {
      this._messages = messages;
      yield this.session.updateMessages(this.threadName, messages);
    });
  }
}
function hasPreamble(msgs) {
  return !!(msgs == null ? void 0 : msgs.find((m) => {
    var _a;
    return (_a = m.metadata) == null ? void 0 : _a.preamble;
  }));
}
function getPreamble(msgs) {
  return msgs == null ? void 0 : msgs.filter((m) => {
    var _a;
    return (_a = m.metadata) == null ? void 0 : _a.preamble;
  });
}
function stripPreamble(msgs) {
  return msgs == null ? void 0 : msgs.filter((m) => {
    var _a;
    return !((_a = m.metadata) == null ? void 0 : _a.preamble);
  });
}
export {
  Chat,
  MAIN_THREAD
};
//# sourceMappingURL=chat.mjs.map