"use strict";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var chat_exports = {};
__export(chat_exports, {
  Chat: () => Chat,
  MAIN_THREAD: () => MAIN_THREAD
});
module.exports = __toCommonJS(chat_exports);
var import_tracing = require("@genkit-ai/core/tracing");
var import_index = require("./index.js");
var import_session = require("./session");
const MAIN_THREAD = "main";
class Chat {
  constructor(session, requestBase, options) {
    this.session = session;
    this.sessionId = options.id;
    this.threadName = options.thread;
    this.requestBase = requestBase == null ? void 0 : requestBase.then((rb) => {
      var _a, _b, _c, _d, _e, _f;
      const requestBase2 = __spreadValues({}, rb);
      if (requestBase2 && requestBase2["prompt"]) {
        const basePrompt = requestBase2["prompt"];
        let promptMessage;
        if (typeof basePrompt === "string") {
          promptMessage = {
            role: "user",
            content: [{ text: basePrompt }]
          };
        } else if (Array.isArray(basePrompt)) {
          promptMessage = {
            role: "user",
            content: basePrompt
          };
        } else {
          promptMessage = {
            role: "user",
            content: [basePrompt]
          };
        }
        requestBase2.messages = [...(_a = requestBase2.messages) != null ? _a : [], promptMessage];
      }
      if (hasPreamble(requestBase2.messages)) {
        requestBase2.messages = [
          // if request base contains a preamble, always put it first
          ...(_b = getPreamble(requestBase2.messages)) != null ? _b : [],
          // strip out the preamble from history
          ...(_c = stripPreamble(options.messages)) != null ? _c : [],
          // add whatever non-preamble remains from request
          ...(_d = stripPreamble(requestBase2.messages)) != null ? _d : []
        ];
      } else {
        requestBase2.messages = [
          ...(_e = options.messages) != null ? _e : [],
          ...(_f = requestBase2.messages) != null ? _f : []
        ];
      }
      this._messages = requestBase2.messages;
      return requestBase2;
    });
    this._messages = options.messages;
  }
  send(options) {
    return __async(this, null, function* () {
      return (0, import_session.runWithSession)(
        this.session,
        () => (0, import_tracing.runInNewSpan)({ metadata: { name: "send" } }, () => __async(this, null, function* () {
          var _a, _b;
          let resolvedOptions;
          let streamingCallback = void 0;
          if (typeof options === "string") {
            resolvedOptions = {
              prompt: options
            };
          } else if (Array.isArray(options)) {
            resolvedOptions = {
              prompt: options
            };
          } else {
            resolvedOptions = options;
            streamingCallback = resolvedOptions.streamingCallback;
          }
          let request = __spreadValues(__spreadProps(__spreadValues({}, yield this.requestBase), {
            messages: this.messages
          }), resolvedOptions);
          let response = yield (0, import_index.generate)(this.session.registry, __spreadProps(__spreadValues({}, request), {
            streamingCallback
          }));
          this.requestBase = Promise.resolve(__spreadProps(__spreadValues({}, yield this.requestBase), {
            // these things may get changed by tools calling within generate.
            tools: (_a = response == null ? void 0 : response.request) == null ? void 0 : _a.tools,
            config: (_b = response == null ? void 0 : response.request) == null ? void 0 : _b.config
          }));
          yield this.updateMessages(response.messages);
          return response;
        }))
      );
    });
  }
  sendStream(options) {
    return (0, import_session.runWithSession)(
      this.session,
      () => (0, import_tracing.runInNewSpan)({ metadata: { name: "send" } }, () => __async(this, null, function* () {
        let resolvedOptions;
        if (typeof options === "string") {
          resolvedOptions = {
            prompt: options
          };
        } else if (Array.isArray(options)) {
          resolvedOptions = {
            prompt: options
          };
        } else {
          resolvedOptions = options;
        }
        const { response, stream } = yield (0, import_index.generateStream)(
          this.session.registry,
          __spreadValues(__spreadProps(__spreadValues({}, yield this.requestBase), {
            messages: this.messages
          }), resolvedOptions)
        );
        return {
          response: response.finally(() => __async(this, null, function* () {
            var _a, _b;
            const resolvedResponse = yield response;
            this.requestBase = Promise.resolve(__spreadProps(__spreadValues({}, yield this.requestBase), {
              // these things may get changed by tools calling within generate.
              tools: (_a = resolvedResponse == null ? void 0 : resolvedResponse.request) == null ? void 0 : _a.tools,
              config: (_b = resolvedResponse == null ? void 0 : resolvedResponse.request) == null ? void 0 : _b.config
            }));
            this.updateMessages(resolvedResponse.messages);
          })),
          stream
        };
      }))
    );
  }
  get messages() {
    var _a;
    return (_a = this._messages) != null ? _a : [];
  }
  updateMessages(messages) {
    return __async(this, null, function* () {
      this._messages = messages;
      yield this.session.updateMessages(this.threadName, messages);
    });
  }
}
function hasPreamble(msgs) {
  return !!(msgs == null ? void 0 : msgs.find((m) => {
    var _a;
    return (_a = m.metadata) == null ? void 0 : _a.preamble;
  }));
}
function getPreamble(msgs) {
  return msgs == null ? void 0 : msgs.filter((m) => {
    var _a;
    return (_a = m.metadata) == null ? void 0 : _a.preamble;
  });
}
function stripPreamble(msgs) {
  return msgs == null ? void 0 : msgs.filter((m) => {
    var _a;
    return !((_a = m.metadata) == null ? void 0 : _a.preamble);
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Chat,
  MAIN_THREAD
});
//# sourceMappingURL=chat.js.map